#ifndef PAGES_HPP
#define PAGES_HPP

namespace server {
    namespace pages {
        namespace all_data {
            constexpr int code = 200;
            constexpr char name[] = "/all_data";
            constexpr char content_type[] = "text/html";
        }

        namespace current_data {
            constexpr int code = 200;
            constexpr char name[] = "/current_data";
            constexpr char content_type[] = "text/html";
        }

        namespace index {
            constexpr int code = 200;
            constexpr char name[] = "/";
            constexpr char content_type[] = "text/html";
            constexpr char page[] PROGMEM = "<!DOCTYPE html>\n"
                                            "<html>"
                                            "<title>Temperature</title>"
                                            "<script>"
                                            "/**\n"
                                            " * dopyo.js object.\n"
                                            " * @constructor\n"
                                            " * @param {String} id - DOM id for chart object\n"
                                            " * @param {String} type - chart type = \"Bar\"|\"Column\"|\"Line\"|\"Stacked-Bar\"|\"Pie\"\n"
                                            " */\n"
                                            "function Dopyo(id, type) {\n"
                                            "\n"
                                            "\t// Check id is duplicated\n"
                                            "\tlet element = document.getElementById(id);\n"
                                            "\n"
                                            "\tif(undefined != element) {\n"
                                            "\t\tthrow new Error(\"DOM id \" + id + \" is already exist.\");\n"
                                            "\t}\n"
                                            "\n"
                                            "\t// Attributes: Common\n"
                                            "\tthis.id = id;\n"
                                            "\tthis.setType(type);\n"
                                            "\n"
                                            "\tlet agent = navigator.userAgent.toLowerCase();\n"
                                            "\tlet isIE = false;\n"
                                            "\tif ( (navigator.appName == 'Netscape' && navigator.userAgent.search('Trident') != -1) || (agent.indexOf(\"msie\") != -1) ) {\n"
                                            "\t\tisIE = true;\n"
                                            "\t}\n"
                                            "\tthis.isIE = isIE;\n"
                                            "\t\n"
                                            "\tthis.panel = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\n"
                                            "\tthis.panel.setAttribute(\"id\", id);\n"
                                            "\t\n"
                                            "\tthis.animate = new Object();\n"
                                            "\tthis.animate.show = true;\n"
                                            "\tthis.animate.duration = 0.5;\n"
                                            "\tif(isIE) {\n"
                                            "\t\tthis.animate.show = false;\n"
                                            "\t}\n"
                                            "\n"
                                            "\tthis.padding = new Object();\n"
                                            "\tthis.padding.top = 50;\n"
                                            "\tthis.padding.right = 0;\n"
                                            "\tthis.padding.bottom = 10;\n"
                                            "\tthis.padding.left = 0;\n"
                                            "\n"
                                            "\tthis.eventCoord = new Object();\n"
                                            "\tthis.eventCoord.x = 0;\n"
                                            "\tthis.eventCoord.y = 0;\n"
                                            "\n"
                                            "\t// Attributes: Title\n"
                                            "\tthis.title = new Object();\n"
                                            "\tthis.title.show = true;\n"
                                            "\tthis.title.text = id;\n"
                                            "\tthis.title.position = new Object();\n"
                                            "\tthis.title.position.x = \"center\";\n"
                                            "\tthis.title.position.y = 10;\n"
                                            "\tthis.title.backgroundColor = \"rgba(255, 255, 255, 0.8)\";\n"
                                            "\tthis.title.borderColor = \"rgba(100, 100, 100, 1)\";\n"
                                            "\tthis.title.fontSize = 20;\n"
                                            "\tthis.title.fontFamily = \"serif\";\n"
                                            "\tthis.title.fontWeight = \"normal\";\n"
                                            "\tthis.title.fontColor = \"rgba(100, 100, 100, 1)\";\n"
                                            "\n"
                                            "\t// Attributes: Tooltip\n"
                                            "\tthis.tooltip = new Object();\n"
                                            "\tthis.tooltip.show = true;\n"
                                            "\tthis.tooltip.backgroundColor = \"rgba(100, 100, 100, 0.8)\";\n"
                                            "\tthis.tooltip.fontColor = \"white\";\n"
                                            "\tthis.tooltip.object = null;\n"
                                            "\n"
                                            "\t// Attributes: Value on chart\n"
                                            "\tthis.valueOnChart = new Object();\n"
                                            "\tthis.valueOnChart.show = false;\n"
                                            "\n"
                                            "\t// Attributes: Labels\n"
                                            "\tthis.labels = new Object();\n"
                                            "\tthis.labels.show = true;\n"
                                            "\tthis.labels.fontColor = \"rgba(100, 100, 100, 1)\";\n"
                                            "\tthis.labels.fontSize = 12;\n"
                                            "\tthis.labels.fontFamily = \"sans-serif\";\n"
                                            "\tthis.labels.fontWeight = \"normal\";\n"
                                            "\tthis.labels.list = null;\n"
                                            "\n"
                                            "\t// Attributes: Legends\n"
                                            "\tthis.legends = new Object();\n"
                                            "\tthis.legends.list = null;\n"
                                            "\tthis.legends.map = null;\n"
                                            "\tthis.legends.table = new Object();\n"
                                            "\tthis.legends.table.show = true;\n"
                                            "\tthis.legends.table.position = new Object();\n"
                                            "\tthis.legends.table.position.x = \"right\";\n"
                                            "\tthis.legends.table.position.y = 10;\n"
                                            "\tthis.legends.table.direction = \"vertical\";\n"
                                            "\tthis.legends.table.backgroundColor = \"rgba(255, 255, 255, 0.8)\";\n"
                                            "\tthis.legends.table.borderColor = \"rgba(100, 100, 100, 1)\";\n"
                                            "\tthis.legends.table.fontColor = \"rgba(100, 100, 100, 1)\";\n"
                                            "\n"
                                            "\t// Attributes: Axis X\n"
                                            "\tthis.axisX = new Object();\n"
                                            "\tthis.axisX.show = true;\n"
                                            "\tthis.axisX.color = \"rgba(200, 200, 200, 0.5)\"\n"
                                            "\tthis.axisX.width = 1;\n"
                                            "\tthis.axisX.minValue = 0;\n"
                                            "\tthis.axisX.maxValue = 0;\n"
                                            "\n"
                                            "\t// Attributes: Axis Y\n"
                                            "\tthis.axisY = new Object();\n"
                                            "\tthis.axisY.show = true;\n"
                                            "\tthis.axisY.color = \"rgba(200, 200, 200, 0.5)\"\n"
                                            "\tthis.axisY.width = 1;\n"
                                            "\tthis.axisY.minValue = 0;\n"
                                            "\tthis.axisY.maxValue = 0;\n"
                                            "\tthis.axisY.stackedBarMinValue = 0;\n"
                                            "\tthis.axisY.stackedBarMaxValue = 0;\n"
                                            "\n"
                                            "\t// Attributes: Grid X\n"
                                            "\tthis.gridX = new Object();\n"
                                            "\tthis.gridX.show = true;\n"
                                            "\tthis.gridX.interval = 0;\n"
                                            "\tthis.gridX.fill = \"rgba(200, 200, 200, 0.5)\"\n"
                                            "\tthis.gridX.label = new Object();\n"
                                            "\tthis.gridX.label.show = true;\n"
                                            "\n"
                                            "\t// Attributes: Grid Y\n"
                                            "\tthis.gridY = new Object();\n"
                                            "\tthis.gridY.show = false;\n"
                                            "\tthis.gridY.interval = 0;\n"
                                            "\tthis.gridY.fill = \"rgba(200, 200, 200, 0.5)\";\n"
                                            "\tthis.gridY.label = new Object();\n"
                                            "\tthis.gridY.label.show = true;\n"
                                            "\n"
                                            "\t// Attributes: for line chart\n"
                                            "\tthis.line = new Object();\n"
                                            "\tthis.line.width = 2;\n"
                                            "\tthis.line.style = \"curve\" // curve | straight\n"
                                            "\n"
                                            "\tthis.point = new Object();\n"
                                            "\tthis.point.show = true;\n"
                                            "\tthis.point.radius = 5;\n"
                                            "\tthis.point.strokeWidth = 2;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set chart type.\n"
                                            " * @param {String} type - chart type = \"Bar\"|\"Column\"|\"Line\"|\"Stacked-Bar\"|\"Pie\"\n"
                                            " */\n"
                                            "Dopyo.prototype.setType = function(type) {\n"
                                            "\n"
                                            "\t// Check chart type\n"
                                            "\tif(\"Bar\" != type\n"
                                            "\t\t&& \"Column\" != type\n"
                                            "\t\t&& \"Line\" != type\n"
                                            "\t\t&& \"Stacked-Bar\" != type\n"
                                            "\t\t&& \"Pie\" != type\n"
                                            "\t\t) {\n"
                                            "\n"
                                            "\t\tthrow new Error(\"Chart type \" + type + \" is not allowed.\");\n"
                                            "\t}\n"
                                            "\n"
                                            "\tthis.type = type;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Show animation.\n"
                                            " * @param {Boolean} show - enable animation\n"
                                            " */\n"
                                            "Dopyo.prototype.setAnimateShow = function(show) {\n"
                                            "\t\n"
                                            "\tthis.animate.show = show;\n"
                                            "\n"
                                            "\tif(this.isIE) {\n"
                                            "\t\tthis.animate.show = false;\n"
                                            "\t}\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set aniamtion duration.\n"
                                            " * @param {Number} second - animation duration(second)\n"
                                            " */\n"
                                            "Dopyo.prototype.setAnimateDuration = function(second) {\n"
                                            "\tthis.animate.duration = second;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set chart padding in injected DOM object.\n"
                                            " * @param {Number} top - top padding\n"
                                            " * @param {Number} right - right padding\n"
                                            " * @param {Number} bottom - bottom padding\n"
                                            " * @param {Number} left - left padding\n"
                                            " */\n"
                                            "Dopyo.prototype.setPadding = function(top, right, bottom, left) {\n"
                                            "\tthis.padding.top = top;\n"
                                            "\tthis.padding.right = right;\n"
                                            "\tthis.padding.bottom = bottom;\n"
                                            "\tthis.padding.left = left;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Show chart title.\n"
                                            " * @param {Boolean} show - show chart title box\n"
                                            " */\n"
                                            "Dopyo.prototype.setTitleShow = function(show) {\n"
                                            "\tthis.title.show = show;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set chart title text.\n"
                                            " * @param {String} text - chart title text\n"
                                            " */\n"
                                            "Dopyo.prototype.setTitleText = function(text) {\n"
                                            "\tthis.title.text = text;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set chart title coordination.\n"
                                            " * @param {Number} x - coordination x\n"
                                            " * @param {Number} y - coordination y\n"
                                            " */\n"
                                            "Dopyo.prototype.setTitlePosition = function(x, y) {\n"
                                            "\tthis.title.position.x = x;\n"
                                            "\tthis.title.position.y = y;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set chart title background color.\n"
                                            " * @param {String} color - chart title background color, CSS color property style\n"
                                            " */\n"
                                            "Dopyo.prototype.setTitleBackgroundColor = function(color) {\n"
                                            "\tthis.title.backgroundColor = color;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set chart title box border color.\n"
                                            " * @param {String} color - chart title box border color, CSS color property style\n"
                                            " */\n"
                                            "Dopyo.prototype.setTitleBorderColor = function(color) {\n"
                                            "\tthis.title.borderColor = color;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set chart title font size.\n"
                                            " * @param {Number} fontSize - chart title text font size\n"
                                            " */\n"
                                            "Dopyo.prototype.setTitleFontSize = function(fontSize) {\n"
                                            "\tthis.title.fontSize = fontSize;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set chart title font family.\n"
                                            " * @param {String} fontFamily - chart title text font family\n"
                                            " */\n"
                                            "Dopyo.prototype.setTitleFontFamily = function(fontFamily) {\n"
                                            "\tthis.title.fontFamily = fontFamily;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set chart title font weight.\n"
                                            " * @param {String} fontWeight - chart title text font weight\n"
                                            " */\n"
                                            "Dopyo.prototype.setTitleFontWeight = function(fontWeight) {\n"
                                            "\tthis.title.fontWeight = fontWeight;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set chart title font color.\n"
                                            " * @param {String} color - chart title text font color, CSS color property style\n"
                                            " */\n"
                                            "Dopyo.prototype.setTitleFontColor = function(color) {\n"
                                            "\tthis.title.fontColor = color;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set chart background color.\n"
                                            " * @param {String} color - chart background color, CSS color property style\n"
                                            " */\n"
                                            "Dopyo.prototype.setBackgroundColor = function(color) {\n"
                                            "\tthis.panel.style.backgroundColor = color;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Show value on chart.\n"
                                            " * @param {Boolean} show - show value on chart area\n"
                                            " */\n"
                                            "Dopyo.prototype.setValueOnChartShow = function(show) {\n"
                                            "\tthis.valueOnChart.show = show;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Get width of chart object.\n"
                                            " * @returns {Number} width of chart object\n"
                                            " */\n"
                                            "Dopyo.prototype.getWidth = function() {\n"
                                            "\treturn this.panel.getBoundingClientRect().width;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Get height of chart object.\n"
                                            " * @returns {Number} height of chart object\n"
                                            " */\n"
                                            "Dopyo.prototype.getHeight = function() {\n"
                                            "\treturn this.panel.getBoundingClientRect().height;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set labels.\n"
                                            " * @param {(String|Array)} labels - array of label string.\n"
                                            " */\n"
                                            "Dopyo.prototype.setLabels = function(labels) {\n"
                                            "\tthis.labels.list = labels;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Show labels.\n"
                                            " * @param {Boolean} show - show labels\n"
                                            " */\n"
                                            "Dopyo.prototype.setLabelShow = function(show) {\n"
                                            "\tthis.labels.show = show;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set label font color.\n"
                                            " * @param {String} color - label text font color, CSS color property style\n"
                                            " */\n"
                                            "Dopyo.prototype.setLabelFontColor = function(color) {\n"
                                            "\tthis.labels.fontColor = color;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set label font family.\n"
                                            " * @param {String} fontFamily - label text font family\n"
                                            " */\n"
                                            "Dopyo.prototype.setLabelFontFamily = function(fontFamily) {\n"
                                            "\tthis.labels.fontFamily = fontFamily;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set label font size.\n"
                                            " * @param {Number} fontSize - label text font size\n"
                                            " */\n"
                                            "Dopyo.prototype.setLabelFontSize = function(fontSize) {\n"
                                            "\tthis.labels.fontSize = fontSize;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set label font weight.\n"
                                            " * @param {String} fontWeight - label text font weight\n"
                                            " */\n"
                                            "Dopyo.prototype.setLabelFontWeight = function(fontWeight) {\n"
                                            "\tthis.labels.fontWeight = fontWeight;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Add legend and values.\n"
                                            " * name, values attributes are required.\n"
                                            " * @param {Object} legend - (String) name, (String) fill, (String) stroke, (Number|Array) values\n"
                                            " */\n"
                                            "Dopyo.prototype.addLegend = function(legend) {\n"
                                            "\n"
                                            "\tlet r = null;\n"
                                            "\tlet g = null;\n"
                                            "\tlet b = null;\n"
                                            "\n"
                                            "\tif(null == this.legends.list) {\n"
                                            "\t\tthis.legends.list = new Array();\n"
                                            "\t}\n"
                                            "\n"
                                            "\tif(undefined == legend.fill) {\n"
                                            "\n"
                                            "\t\tr = Math.floor(Math.random() * 255);\n"
                                            "\t\tg = Math.floor(Math.random() * 255);\n"
                                            "\t\tb = Math.floor(Math.random() * 255);\n"
                                            "\n"
                                            "\t\tlegend.fill = \"rgba(\"\n"
                                            "\t\t\t+ r + \", \"\n"
                                            "\t\t\t+ g + \", \"\n"
                                            "\t\t\t+ b + \", 0.9)\";\n"
                                            "\t}\n"
                                            "\n"
                                            "\tif(undefined == legend.stroke) {\n"
                                            "\n"
                                            "\t\tif(null != r) {\n"
                                            "\n"
                                            "\t\t\tr -= 10;\n"
                                            "\t\t\tr = r < 0 ? 0 : r;\n"
                                            "\n"
                                            "\t\t\tg -= 10;\n"
                                            "\t\t\tg = g < 0 ? 0 : g;\n"
                                            "\n"
                                            "\t\t\tb -= 10;\n"
                                            "\t\t\tb = b < 0 ? 0 : b;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlegend.stroke = \"rgba(\"\n"
                                            "\t\t\t+ r + \", \"\n"
                                            "\t\t\t+ g + \", \"\n"
                                            "\t\t\t+ b + \", 1)\";\n"
                                            "\t}\n"
                                            "\n"
                                            "\tthis.legends.list.push(legend);\n"
                                            "\n"
                                            "\tif(null == this.legends.map) {\n"
                                            "\t\tthis.legends.map = new Map();\n"
                                            "\t}\n"
                                            "\n"
                                            "\tthis.legends.map.set(legend.name, legend);\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Remove legend.\n"
                                            " * @param {string} name - legend name\n"
                                            " */\n"
                                            "Dopyo.prototype.removeLegend = function(name) {\n"
                                            "\n"
                                            "\tlet index = -1;\n"
                                            "\n"
                                            "\tif(null == this.legends.list) {\n"
                                            "\t\treturn;\n"
                                            "\t}\n"
                                            "\n"
                                            "\tfor(let i = 0; i < this.legends.list.length; i++) {\n"
                                            "\n"
                                            "\t\tif(this.legends.list[i].name == name) {\n"
                                            "\t\t\tindex = i;\n"
                                            "\t\t\tbreak;\n"
                                            "\t\t}\n"
                                            "\t}\n"
                                            "\n"
                                            "\tif(index > -1) {\n"
                                            "\n"
                                            "\t\tthis.legends.list.splice(index, 1);\n"
                                            "\t\tthis.legends.map.delete(name);\n"
                                            "\t}\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Get legend by name.\n"
                                            " * @param {string} name - legend name\n"
                                            " * @returns {Object} legend\n"
                                            " */\n"
                                            "Dopyo.prototype.getLegend = function(name) {\n"
                                            "\treturn this.legends.map.get(name);\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Show legend table.\n"
                                            " * @param {Boolean} show - show legend table\n"
                                            " */\n"
                                            "Dopyo.prototype.setLegendTableShow = function(show) {\n"
                                            "\tthis.legends.table.show = show;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set legend table position.\n"
                                            " * @param {Number} x - coordinate x\n"
                                            " * @param {Number} y - coordinate y\n"
                                            " */\n"
                                            "Dopyo.prototype.setLegendTablePosition = function(x, y) {\n"
                                            "\tthis.legends.table.position.x = x;\n"
                                            "\tthis.legends.table.position.y = y;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set legend table direction.\n"
                                            " * @param {String} direction - legend item display direction = \"vertical\"|\"horizontal\"\n"
                                            " */\n"
                                            "Dopyo.prototype.setLegendTableDirection = function(direction) {\n"
                                            "\tthis.legends.table.direction = direction;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set legend table background color.\n"
                                            " * @param {String} color - legend table background color, CSS color property style\n"
                                            " */\n"
                                            "Dopyo.prototype.setLegendTableBackgroundColor = function(color) {\n"
                                            "\tthis.legends.table.backgroundColor = color;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set legend table border color.\n"
                                            " * @param {String} color - legend table border color, CSS color property style\n"
                                            " */\n"
                                            "Dopyo.prototype.setLegendTableBorderColor = function(color) {\n"
                                            "\tthis.legends.table.borderColor = color;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set legend table font color.\n"
                                            " * @param {String} color - legend table text font color, CSS color property style\n"
                                            " */\n"
                                            "Dopyo.prototype.setLegendTableFontColor = function(color) {\n"
                                            "\tthis.legends.table.fontColor = color;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Get minimum value.\n"
                                            " * If chart type is Stacked-Bar, returns summary value.\n"
                                            " * @returns {Number} value\n"
                                            " */\n"
                                            "Dopyo.prototype.getMinValue = function() {\n"
                                            "\n"
                                            "\tlet minValue = 0;\n"
                                            "\tlet value = 0;\n"
                                            "\tlet legendList = this.legends.list;\n"
                                            "\tlet values = this.values;\n"
                                            "\n"
                                            "\tif(\"Stacked-Bar\" == this.type) {\n"
                                            "\n"
                                            "\t\tlet summary = new Array();\n"
                                            "\t\tlet valuesIndex = 0;\n"
                                            "\n"
                                            "\t\tlegendList.forEach(function(legend) {\n"
                                            "\n"
                                            "\t\t\tlegend.values.forEach(function(value) {\n"
                                            "\n"
                                            "\t\t\t\t// Negative value not allowed\n"
                                            "\t\t\t\tif(value > 0) {\n"
                                            "\n"
                                            "\t\t\t\t\tif(undefined === summary[valuesIndex]) {\n"
                                            "\t\t\t\t\t\tsummary[valuesIndex] = value;\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t\telse {\n"
                                            "\t\t\t\t\t\tsummary[valuesIndex] += value;\t\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t++valuesIndex;\n"
                                            "\t\t\t});\n"
                                            "\t\t});\n"
                                            "\n"
                                            "\t}\n"
                                            "\n"
                                            "\telse {\n"
                                            "\n"
                                            "\t\tlegendList.forEach(function(legend) {\n"
                                            "\n"
                                            "\t\t\tlegend.values.forEach(function(value) {\n"
                                            "\n"
                                            "\t\t\t\tif(minValue > value) {\n"
                                            "\t\t\t\t\tminValue = value;\n"
                                            "\t\t\t\t}\n"
                                            "\t\t\t});\n"
                                            "\t\t});\n"
                                            "\n"
                                            "\t}\n"
                                            "\n"
                                            "\treturn minValue;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Get maximum value.\n"
                                            " * If chart type is Stacked-Bar, returns summary value.\n"
                                            " * @returns {Number} value\n"
                                            " */\n"
                                            "Dopyo.prototype.getMaxValue = function() {\n"
                                            "\n"
                                            "\tlet maxValue = 0;\n"
                                            "\tlet value = 0;\n"
                                            "\tlet legendList = this.legends.list;\n"
                                            "\tlet values = this.values;\n"
                                            "\n"
                                            "\tif(\"Stacked-Bar\" == this.type) {\n"
                                            "\n"
                                            "\t\tlet summary = new Array();\n"
                                            "\n"
                                            "\t\tlegendList.forEach(function(legend) {\n"
                                            "\n"
                                            "\t\t\tlet valuesIndex = 0;\n"
                                            "\n"
                                            "\t\t\tlegend.values.forEach(function(value) {\n"
                                            "\n"
                                            "\t\t\t\t// Negative value not allowed\n"
                                            "\t\t\t\tif(value > 0) {\n"
                                            "\n"
                                            "\t\t\t\t\tif(undefined === summary[valuesIndex]) {\n"
                                            "\t\t\t\t\t\tsummary[valuesIndex] = value;\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t\telse {\n"
                                            "\t\t\t\t\t\tsummary[valuesIndex] += value;\t\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t++valuesIndex;\n"
                                            "\t\t\t});\n"
                                            "\t\t});\n"
                                            "\n"
                                            "\t\tsummary.forEach(function(value) {\n"
                                            "\t\t\tif(maxValue < value) {\n"
                                            "\t\t\t\tmaxValue = value;\n"
                                            "\t\t\t}\n"
                                            "\t\t});\n"
                                            "\t}\n"
                                            "\n"
                                            "\telse {\n"
                                            "\n"
                                            "\t\tlegendList.forEach(function(legend) {\n"
                                            "\n"
                                            "\t\t\tlegend.values.forEach(function(value) {\n"
                                            "\n"
                                            "\t\t\t\tif(maxValue < value) {\n"
                                            "\t\t\t\t\tmaxValue = value;\n"
                                            "\t\t\t\t}\n"
                                            "\t\t\t});\n"
                                            "\t\t});\n"
                                            "\n"
                                            "\t}\n"
                                            "\n"
                                            "\treturn maxValue;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Show axis X.\n"
                                            " * @param {Boolean} show - show axis X\n"
                                            " */\n"
                                            "Dopyo.prototype.setAxisXShow = function(show) {\n"
                                            "\tthis.axisX.show = show;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set axis X color.\n"
                                            " * @param {String} color - axis X color, CSS color property style\n"
                                            " */\n"
                                            "Dopyo.prototype.setAxisXColor = function(color) {\n"
                                            "\tthis.axisX.color = color;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set axis X line width.\n"
                                            " * @param {Number} width - axis X line width\n"
                                            " */\n"
                                            "Dopyo.prototype.setAxisXWidth = function(width) {\n"
                                            "\tthis.axisX.width = width;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set axis X minimum value.\n"
                                            " * It effect to Bar chart.\n"
                                            " * @param {Number} minValue - axis X minimum value\n"
                                            " */\n"
                                            "Dopyo.prototype.setAxisXMinValue = function(minValue) {\n"
                                            "\tthis.axisX.minValue = minValue;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set axis X maximum value.\n"
                                            " * It effect to Bar chart.\n"
                                            " * @param {Number} maxValue - axis X maximum value\n"
                                            " */\n"
                                            "Dopyo.prototype.setAxisXMaxValue = function(maxValue) {\n"
                                            "\tthis.axisX.maxValue = maxValue;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Show axis Y.\n"
                                            " * @param {Boolean} show - show axis Y\n"
                                            " */\n"
                                            "Dopyo.prototype.setAxisYShow = function(show) {\n"
                                            "\tthis.axisY.show = show;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set axis Y color.\n"
                                            " * @param {String} color - axis Y color, CSS color property style\n"
                                            " */\n"
                                            "Dopyo.prototype.setAxisYColor = function(color) {\n"
                                            "\tthis.axisY.color = color;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set axis Y line width.\n"
                                            " * @param {Number} width - axis Y line width\n"
                                            " */\n"
                                            "Dopyo.prototype.setAxisYWidth = function(width) {\n"
                                            "\tthis.axisY.width = width;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set axis Y minimum value.\n"
                                            " * It effect to Column, Line chart.\n"
                                            " * @param {Number} minValue - axis Y minimum value\n"
                                            " */\n"
                                            "Dopyo.prototype.setAxisYMinValue = function(minValue) {\n"
                                            "\tthis.axisY.minValue = minValue;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set axis Y maximum value.\n"
                                            " * It effect to Column, Line chart.\n"
                                            " * @param {Number} maxValue - axis Y maximum value\n"
                                            " */\n"
                                            "Dopyo.prototype.setAxisYMaxValue = function(maxValue) {\n"
                                            "\tthis.axisY.maxValue = maxValue;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set axis Y minimum value.\n"
                                            " * It effect to Stacked-Bar chart only.\n"
                                            " * @param {Number} minValue - axis Y minimum value\n"
                                            " */\n"
                                            "Dopyo.prototype.setAxisYStackedBarMinValue = function(minValue) {\n"
                                            "\tthis.axisY.stackedBarMinValue = minValue;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set axis Y maximum value.\n"
                                            " * It effect to Stacked-Bar chart only.\n"
                                            " * @param {Number} maxValue - axis Y maximum value\n"
                                            " */\n"
                                            "Dopyo.prototype.setAxisYStackedBarMaxValue = function(maxValue) {\n"
                                            "\tthis.axisY.stackedBarMaxValue = maxValue;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Show horizontal grid.\n"
                                            " * @param {Boolean} show - show horizontal grid\n"
                                            " */\n"
                                            "Dopyo.prototype.setGridXShow = function(show) {\n"
                                            "\tthis.gridX.show = show;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Show horizontal grid label.\n"
                                            " * @param {Boolean} show - show horizontal grid label\n"
                                            " */\n"
                                            "Dopyo.prototype.setGridXLabelShow = function(show) {\n"
                                            "\tthis.gridX.label.show = show;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set horizontal grid interval value manually.\n"
                                            " * It effect to Bar chart.\n"
                                            " * @param {Number} interval - horizontal grid interval value\n"
                                            " */\n"
                                            "Dopyo.prototype.setGridXInterval = function(interval) {\n"
                                            "\tthis.gridX.interval = interval;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Show vertical grid.\n"
                                            " * @param {Boolean} show - show vertical grid\n"
                                            " */\n"
                                            "Dopyo.prototype.setGridYShow = function(show) {\n"
                                            "\tthis.gridY.show = show;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Show vertical grid label.\n"
                                            " * @param {Boolean} show - show vertical grid label\n"
                                            " */\n"
                                            "Dopyo.prototype.setGridYLabelShow = function(show) {\n"
                                            "\tthis.gridY.label.show = show;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set vertical grid interval value manually.\n"
                                            " * It effect to Column, Line, Stacked-Bar chart.\n"
                                            " * @param {Number} interval - vertical grid interval value\n"
                                            " */\n"
                                            "Dopyo.prototype.setGridYInterval = function(interval) {\n"
                                            "\tthis.gridY.interval = interval;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Show tooltip.\n"
                                            " * @param {Boolean} show - show tooltip\n"
                                            " */\n"
                                            "Dopyo.prototype.setTooltipShow = function(show) {\n"
                                            "\tthis.tooltip.show = show;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set tooltip box background color.\n"
                                            " * @param {String} color - tooltip box background color, CSS color property style\n"
                                            " */\n"
                                            "Dopyo.prototype.setTooltipBoxColor = function(color) {\n"
                                            "\n"
                                            "\tthis.tooltip.backgroundColor = color;\n"
                                            "\n"
                                            "\tlet tooltipGroup = this.tooltip.object;\n"
                                            "\n"
                                            "\tif(null != tooltipGroup) {\n"
                                            "\t\tlet box = tooltipGroup.childNodes[0];\n"
                                            "\t\tbox.style.backgroundColor = color;\n"
                                            "\t}\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set tooltip text font color.\n"
                                            " * @param {String} color - tooltip text font color, CSS color property style\n"
                                            " */\n"
                                            "Dopyo.prototype.setTooltipFontColor = function(color) {\n"
                                            "\n"
                                            "\tthis.tooltip.fontColor = color;\n"
                                            "\n"
                                            "\tlet tooltipGroup = this.tooltip.object;\n"
                                            "\n"
                                            "\tif(null != tooltipGroup) {\n"
                                            "\t\tlet labelText = tooltipGroup.childNodes[1];\n"
                                            "\t\tlet legendText = tooltipGroup.childNodes[3];\n"
                                            "\t\tlet valueText = tooltipGroup.childNodes[4];\n"
                                            "\n"
                                            "\t\tlabelText.style.fontColor = color;\n"
                                            "\t\tlegendText.style.fontColor = color;\n"
                                            "\t\tvalueText.style.fontColor = color;\n"
                                            "\t}\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Show tooltip event handler\n"
                                            " * @param {Object} event - event object\n"
                                            " * @param {Object} element - DOM object invoked event\n"
                                            " * @param {Object} chart - dopyo.js object\n"
                                            " */\n"
                                            "Dopyo.prototype.showTooltip = function(event, element, chart) {\n"
                                            "\n"
                                            "\tlet x = event.clientX;\n"
                                            "\tlet y = event.clientY;\n"
                                            "\n"
                                            "\t// If event invoked at same coordinate, end this function.\n"
                                            "\tif(x == chart.eventCoord.x && y == chart.eventCoord.y) {\n"
                                            "\t\treturn;\n"
                                            "\t}\n"
                                            "\telse {\n"
                                            "\t\tchart.eventCoord.x = x;\n"
                                            "\t\tchart.eventCoord.y = y;\n"
                                            "\t}\n"
                                            "\n"
                                            "\t// Create SVG element: rect\n"
                                            "\tlet rect = function(id, x, y, width, height, fill, stroke) {\n"
                                            "\n"
                                            "\t\tlet rect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n"
                                            "\n"
                                            "\t\trect.setAttribute(\"id\", id);\n"
                                            "\t\trect.setAttribute(\"x\", x);\n"
                                            "\t\trect.setAttribute(\"y\", y);\n"
                                            "\t\trect.setAttribute(\"width\", width);\n"
                                            "\t\trect.setAttribute(\"height\", height);\n"
                                            "\t\trect.setAttribute(\"fill\", fill);\n"
                                            "\t\trect.setAttribute(\"stroke\", stroke);\n"
                                            "\n"
                                            "\t\treturn rect;\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Create SVG element: text\n"
                                            "\tlet text = function(id, x, y, fontSize, textAnchor, alignmentBaseline, fill, contents) {\n"
                                            "\n"
                                            "\t\t// Modify y coordinate beacuse IE not supported alignment-baseline attribute\n"
                                            "\t\tlet agent = navigator.userAgent.toLowerCase();\n"
                                            "\t\tlet isIE = false;\n"
                                            "\t\tif ( (navigator.appName == 'Netscape' && navigator.userAgent.search('Trident') != -1) || (agent.indexOf(\"msie\") != -1) ) {\n"
                                            "\t\t\tisIE = true;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tif(isIE) {\n"
                                            "\t\t\tif(\"hanging\" == alignmentBaseline) {\n"
                                            "\t\t\t\ty += fontSize;\n"
                                            "\t\t\t}\n"
                                            "\t\t\telse if(\"middle\" == alignmentBaseline) {\n"
                                            "\t\t\t\ty += fontSize/2;\t\n"
                                            "\t\t\t}\n"
                                            "\t\t\telse if(\"baseline\" == alignmentBaseline) {\n"
                                            "\t\t\t\t// No modify\n"
                                            "\t\t\t}\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlet text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n"
                                            "\n"
                                            "\t\ttext.setAttribute(\"id\", id);\n"
                                            "\t\ttext.setAttribute(\"x\", x);\n"
                                            "\t\ttext.setAttribute(\"y\", y);\n"
                                            "\t\ttext.setAttribute(\"font-size\", fontSize);\n"
                                            "\t\ttext.setAttribute(\"text-anchor\", textAnchor);\n"
                                            "\t\t\n"
                                            "\t\t// IE not supported alignment-baseline attribute\n"
                                            "\t\tif(!isIE) {\n"
                                            "\t\t\ttext.setAttribute(\"alignment-baseline\", alignmentBaseline);\t\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\ttext.setAttribute(\"fill\", fill);\n"
                                            "\n"
                                            "\t\ttext.innerHTML = contents;\n"
                                            "\t\ttext.textContent = contents;\n"
                                            "\n"
                                            "\t\treturn text;\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Create SVG element: g\n"
                                            "\tfunction group(transform) {\n"
                                            "\n"
                                            "\t\tlet g = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n"
                                            "\n"
                                            "\t\tif(\"\" != transform) {\n"
                                            "\t\t\tg.setAttribute(\"transform\", transform);\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\treturn g;\n"
                                            "\t};\n"
                                            "\n"
                                            "\tlet legendName = element.getAttribute(\"legend\");\n"
                                            "\tlet legend = chart.getLegend(legendName);\n"
                                            "\tlet value = element.getAttribute(\"value\");\n"
                                            "\tlet label = element.getAttribute(\"label\");\n"
                                            "\tlet fontSize = chart.labels.fontSize;\n"
                                            "\n"
                                            "\tlet margin = (fontSize * 0.5);\n"
                                            "\n"
                                            "\tlet line1 = margin;\n"
                                            "\tlet line2 = fontSize + (2 * margin);\n"
                                            "\tlet line3 = (2 * fontSize) + (3 * margin);\n"
                                            "\tlet line4 = (3 * fontSize) + (4 * margin);\n"
                                            "\n"
                                            "\tlet width = 0;\n"
                                            "\tlet widthLegend = 0;\n"
                                            "\tlet widthValue = 0;\n"
                                            "\tlet height = line4;\n"
                                            "\n"
                                            "\tlet tooltipGroup = chart.tooltip.object;\n"
                                            "\tlet ani = null;\n"
                                            "\n"
                                            "\tx += 10;\n"
                                            "\ty += 10;\n"
                                            "\n"
                                            "\tif(null == tooltipGroup || undefined == tooltipGroup) {\n"
                                            "\n"
                                            "\t\ttooltipGroup = group(\"\");\n"
                                            "\n"
                                            "\t\tlet box = rect(chart.id + \"-tooltip\", x, y, 0, height, chart.tooltip.backgroundColor, \"transparent\");\n"
                                            "\t\tbox.setAttribute(\"rx\", 5);\n"
                                            "\t\tbox.setAttribute(\"ry\", 5);\n"
                                            "\t\ttooltipGroup.appendChild(box);\n"
                                            "\n"
                                            "\t\tlet labelText = text(chart.id + \"-tooltip-label-text\", x + margin, y + line1, fontSize, \"start\", \"hanging\", chart.tooltip.fontColor, label);\n"
                                            "\t\ttooltipGroup.appendChild(labelText);\n"
                                            "\n"
                                            "\t\tlet legendMark = rect(chart.id + \"-tooltip-legend-mark\", x + margin, y + line2, fontSize, fontSize, legend.fill, legend.stroke);\n"
                                            "\t\ttooltipGroup.appendChild(legendMark);\n"
                                            "\n"
                                            "\t\tlet legendText = text(chart.id + \"-tooltip-legend-name\", x + ((2 * margin) + fontSize), y + line2, fontSize, \"start\", \"hanging\", chart.tooltip.fontColor, legendName);\n"
                                            "\t\ttooltipGroup.appendChild(legendText);\n"
                                            "\n"
                                            "\t\tlet valueText = text(chart.id + \"-tooltip-value\", x + margin, y + line3, fontSize, \"start\", \"hanging\", chart.tooltip.fontColor, value);\n"
                                            "\t\ttooltipGroup.appendChild(valueText);\n"
                                            "\n"
                                            "\t\tchart.tooltip.object = tooltipGroup; // Set for manage as singleton\n"
                                            "\t\tchart.panel.appendChild(chart.tooltip.object);\n"
                                            "\n"
                                            "\t\t// Resize box by text width\n"
                                            "\t\twidthLegend = (legendMark.getAttribute(\"width\") * 1) + margin + legendText.getBoundingClientRect().width;\n"
                                            "\t\twidthValue = valueText.getBoundingClientRect().width;\n"
                                            "\t\twidth = (widthLegend > widthValue ? widthLegend : widthValue) + (2 * margin);\n"
                                            "\n"
                                            "\t\tbox.setAttribute(\"width\", width);\n"
                                            "\t}\n"
                                            "\telse {\n"
                                            "\n"
                                            "\t\ttooltipGroup = chart.tooltip.object;\n"
                                            "\n"
                                            "\t\tlet box = tooltipGroup.childNodes[0];\n"
                                            "\t\tlet labelText = tooltipGroup.childNodes[1];\n"
                                            "\t\tlet legendMark = tooltipGroup.childNodes[2];\n"
                                            "\t\tlet legendText = tooltipGroup.childNodes[3];\n"
                                            "\t\tlet valueText = tooltipGroup.childNodes[4];\n"
                                            "\n"
                                            "\t\tbox.setAttribute(\"x\", x);\n"
                                            "\t\tbox.setAttribute(\"y\", y);\n"
                                            "\n"
                                            "\t\tlabelText.setAttribute(\"x\", x + margin);\n"
                                            "\t\tlabelText.setAttribute(\"y\", y + line1);\n"
                                            "\t\tlabelText.innerHTML = label;\n"
                                            "\n"
                                            "\t\tlegendMark.setAttribute(\"x\", x + margin);\n"
                                            "\t\tlegendMark.setAttribute(\"y\", y + line2);\n"
                                            "\t\tlegendMark.setAttribute(\"fill\", legend.fill);\n"
                                            "\t\tlegendMark.setAttribute(\"stroke\", legend.stroke);\n"
                                            "\n"
                                            "\t\tlegendText.setAttribute(\"x\", x + ((2 * margin) + fontSize));\n"
                                            "\t\tlegendText.setAttribute(\"y\", y + line2);\n"
                                            "\t\tlegendText.innerHTML = legendName;\n"
                                            "\n"
                                            "\t\tvalueText.setAttribute(\"x\", x + margin);\n"
                                            "\t\tvalueText.setAttribute(\"y\", y + line3);\n"
                                            "\t\tvalueText.innerHTML = value;\n"
                                            "\n"
                                            "\t\t// Resize box by text width\n"
                                            "\t\twidthLegend = (legendMark.getAttribute(\"width\") * 1) + margin + legendText.getBoundingClientRect().width;\n"
                                            "\t\twidthValue = valueText.getBoundingClientRect().width;\n"
                                            "\t\twidth = (widthLegend > widthValue ? widthLegend : widthValue) + (2 * margin);\n"
                                            "\n"
                                            "\t\tbox.setAttribute(\"width\", width);\n"
                                            "\n"
                                            "\t\t// If tooltip box position is out of chart area, reset coordinates\n"
                                            "\t\tif(x < 0 || (x + width) > chart.getWidth()) {\n"
                                            "\n"
                                            "\t\t\tx = chart.getWidth() - width;\n"
                                            "\n"
                                            "\t\t\tbox.setAttribute(\"x\", x);\n"
                                            "\t\t\tlabelText.setAttribute(\"x\", x + margin);\n"
                                            "\t\t\tlegendMark.setAttribute(\"x\", x + margin);\n"
                                            "\t\t\tlegendText.setAttribute(\"x\", x + ((2 * margin) + fontSize));\n"
                                            "\t\t\tvalueText.setAttribute(\"x\", x + margin);\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tif(y < 0 || (y + height) > chart.getHeight()) {\n"
                                            "\n"
                                            "\t\t\ty = chart.getHeight() - height;\n"
                                            "\n"
                                            "\t\t\tbox.setAttribute(\"y\", y);\n"
                                            "\t\t\tlabelText.setAttribute(\"y\", y + line1);\n"
                                            "\t\t\tlegendMark.setAttribute(\"y\", y + line2);\n"
                                            "\t\t\tlegendText.setAttribute(\"y\", y + line2);\n"
                                            "\t\t\tvalueText.setAttribute(\"y\", y + line3);\n"
                                            "\t\t}\n"
                                            "\t}\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Hide tooltip event handler\n"
                                            " * @param {Object} event - event object\n"
                                            " * @param {Object} chart - dopyo.js object\n"
                                            " */\n"
                                            "Dopyo.prototype.hideTooltip = function(event, chart) {\n"
                                            "\n"
                                            "\tlet x = event.clientX;\n"
                                            "\tlet y = event.clientY;\n"
                                            "\n"
                                            "\t// If event invoked at same coordinate, end this function.\n"
                                            "\tif(x == chart.eventCoord.x && y == chart.eventCoord.y) {\n"
                                            "\t\treturn;\n"
                                            "\t}\n"
                                            "\telse {\n"
                                            "\t\tchart.eventCoord.x = x;\n"
                                            "\t\tchart.eventCoord.y = y;\n"
                                            "\t}\n"
                                            "\n"
                                            "\tlet tooltipGroup = chart.tooltip.object;\n"
                                            "\n"
                                            "\t// Move tooptip components to outside of chart area\n"
                                            "\tif(null != tooltipGroup) {\n"
                                            "\n"
                                            "\t\tlet outsideX = chart.getWidth() + 10;\n"
                                            "\t\tlet outsideY = chart.getHeight() + 10;\n"
                                            "\t\tlet child = null;\n"
                                            "\n"
                                            "\t\tfor(let i = 0; i < tooltipGroup.childNodes.length; i++) {\n"
                                            "\t\t\tchild = tooltipGroup.childNodes[i];\n"
                                            "\t\t\tchild.setAttribute(\"x\", outsideX);\n"
                                            "\t\t\tchild.setAttribute(\"y\", outsideY);\n"
                                            "\t\t}\n"
                                            "\t}\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set line graph width of line chart.\n"
                                            " * @param {Number} width - line graph width of line chart\n"
                                            " */\n"
                                            "Dopyo.prototype.setLineWidth = function(width) {\n"
                                            "\tthis.line.width = width;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set line style of line chart\n"
                                            " * @param {String} style - line style = \"curve\"|\"straight\"\n"
                                            " */\n"
                                            "Dopyo.prototype.setLineStyle = function(style) {\n"
                                            "\tthis.line.style = style;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Show value point on line chart.\n"
                                            " * @param {Boolean} show - show value point on line chart\n"
                                            " */\n"
                                            "Dopyo.prototype.setPointShow = function(show) {\n"
                                            "\tthis.point.show = show;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set value point radius.\n"
                                            " * @param {Number} radius - value point radius\n"
                                            " */\n"
                                            "Dopyo.prototype.setPointRadius = function(radius) {\n"
                                            "\tthis.point.radius = radius;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Set value point stroke width.\n"
                                            " * @param {Number} width - value point stroke width\n"
                                            " */\n"
                                            "Dopyo.prototype.setPointStrokeWidth = function(width) {\n"
                                            "\tthis.point.strokeWidth = width;\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Inject dopyo.js object to DOM object.\n"
                                            " * @param {Object} obj - DOM object to inject dopyo.js object\n"
                                            " */\n"
                                            "Dopyo.prototype.inject = function(obj) {\n"
                                            "\n"
                                            "\tobj.appendChild(this.panel);\n"
                                            "\n"
                                            "\tlet chart = this;\n"
                                            "\tlet panel = this.panel;\n"
                                            "\tpanel.style.width = obj.clientWidth;\n"
                                            "\tpanel.style.height = obj.clientHeight;\n"
                                            "\n"
                                            "\twindow.addEventListener(\"resize\", function() {\n"
                                            "\t\tpanel.style.width = obj.clientWidth;\n"
                                            "\t\tpanel.style.height = obj.clientHeight;\n"
                                            "\t\tchart.tooltip.object = null;\n"
                                            "\t\tchart.draw(false);\n"
                                            "\t});\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Restart animation of all animated objects.\n"
                                            " */\n"
                                            "Dopyo.prototype.restartAnimation = function() {\n"
                                            "\n"
                                            "\tlet animateList = this.panel.getElementsByTagName(\"animate\");\n"
                                            "\n"
                                            "\tfor(let i = 0; i < animateList.length; i++) {\n"
                                            "\t\tanimateList[i].beginElement();\n"
                                            "\t}\n"
                                            "}\n"
                                            "\n"
                                            "/**\n"
                                            " * Draw chart by chart type\n"
                                            " * @param {Boolean} restartAnimation - If it's true, restart animation when draw chart\n"
                                            " */\n"
                                            "Dopyo.prototype.draw = function(restartAnimation) {\n"
                                            "\n"
                                            "\tif(undefined == restartAnimation) {\n"
                                            "\t\trestartAnimation = true;\n"
                                            "\t}\n"
                                            "\n"
                                            "\t// Remove all element\n"
                                            "\twhile(this.panel.firstChild) {\n"
                                            "\t\tthis.panel.removeChild(this.panel.firstChild);\n"
                                            "\t\tthis.tooltip.object = null;\n"
                                            "\t}\n"
                                            "\n"
                                            "\t// Create SVG element: line\n"
                                            "\tlet line = function(id, x1, y1, x2, y2, fill, stroke, width) {\n"
                                            "\n"
                                            "\t\tlet moveTo = \"M \" + x1 + \" \" + y1;\n"
                                            "\t\tlet lineTo = \"L \" + x2 + \" \" + y2;\n"
                                            "\t\tlet strokeWidth = undefined == width ? 1 : width;\n"
                                            "\n"
                                            "\t\tlet line = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n"
                                            "\n"
                                            "\t\tline.setAttribute(\"id\", id);\n"
                                            "\t\tline.setAttribute(\"d\", moveTo + \" \" + lineTo + \" Z\");\n"
                                            "\t\tline.setAttribute(\"fill\", fill);\n"
                                            "\t\tline.setAttribute(\"stroke\", stroke);\n"
                                            "\t\tline.setAttribute(\"stroke-width\", strokeWidth);\n"
                                            "\n"
                                            "\t\treturn line;\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Create SVG element: curve\n"
                                            "\tlet curve = function(id, x1, y1, cx1, cy1, x2, y2, cx2, cy2, stroke, width) {\n"
                                            "\n"
                                            "\t\tlet moveTo = \"M \" + x1 + \" \" + y1;\n"
                                            "\t\tlet curveTo = \"C \" + cx1 + \" \" + cy1 + \" \" + cx2 + \" \" + cy2 + \" \" + x2 + \" \" + y2;\n"
                                            "\t\tlet strokeWidth = undefined == width ? 1 : width;\n"
                                            "\n"
                                            "\t\tlet curve = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n"
                                            "\n"
                                            "\t\tcurve.setAttribute(\"id\", id);\n"
                                            "\t\tcurve.setAttribute(\"d\", moveTo + \" \" + curveTo);\n"
                                            "\t\tcurve.setAttribute(\"fill\", \"transparent\");\n"
                                            "\t\tcurve.setAttribute(\"stroke\", stroke);\n"
                                            "\t\tcurve.setAttribute(\"stroke-width\", strokeWidth);\n"
                                            "\n"
                                            "\t\treturn curve;\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Create SVG element: rect\n"
                                            "\tlet rect = function(id, x, y, width, height, fill, stroke) {\n"
                                            "\n"
                                            "\t\tlet rect = document.createElementNS(\"http://www.w3.org/2000/svg\", \"rect\");\n"
                                            "\n"
                                            "\t\trect.setAttribute(\"id\", id);\n"
                                            "\t\trect.setAttribute(\"x\", x);\n"
                                            "\t\trect.setAttribute(\"y\", y);\n"
                                            "\t\trect.setAttribute(\"width\", width);\n"
                                            "\t\trect.setAttribute(\"height\", height);\n"
                                            "\t\trect.setAttribute(\"fill\", fill);\n"
                                            "\t\trect.setAttribute(\"stroke\", stroke);\n"
                                            "\n"
                                            "\t\treturn rect;\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Create SVG element: circle\n"
                                            "\tlet circle = function(id, cx, cy, r, fill, stroke, strokeWidth) {\n"
                                            "\n"
                                            "\t\tlet circle = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n"
                                            "\n"
                                            "\t\tcircle.setAttribute(\"id\", id);\n"
                                            "\t\tcircle.setAttribute(\"cx\", cx);\n"
                                            "\t\tcircle.setAttribute(\"cy\", cy);\n"
                                            "\t\tcircle.setAttribute(\"r\", r);\n"
                                            "\t\tcircle.setAttribute(\"fill\", fill);\n"
                                            "\t\tcircle.setAttribute(\"stroke\", stroke);\n"
                                            "\t\tcircle.setAttribute(\"stroke-width\", strokeWidth);\n"
                                            "\n"
                                            "\t\treturn circle;\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Create SVG element: pie\n"
                                            "\tfunction pie(id, cx, cy, r, from, to, fill, stroke, strokeWidth) {\n"
                                            "\n"
                                            "\t\tlet fromDegree = from * 360 - 90;\n"
                                            "\t\tlet toDegree = to * 360 - 90;\n"
                                            "\t\tlet over180 = to - from > 0.5 ? \"1\" : \"0\";\n"
                                            "\n"
                                            "\t\tlet fromRadian = fromDegree * Math.PI / 180.0;\n"
                                            "\t\tlet toRadian = toDegree * Math.PI / 180.0;\n"
                                            "\t\t\n"
                                            "\t\tlet fromX = cx + r * Math.cos(fromRadian);\n"
                                            "\t\tlet fromY = cy + r * Math.sin(fromRadian);\n"
                                            "\t\tlet toX = cx + r * Math.cos(toRadian);\n"
                                            "\t\tlet toY = cy + r * Math.sin(toRadian);\n"
                                            "\n"
                                            "\t\tlet moveTo = \"M \" + cx + \" \" + cy;\n"
                                            "\t\tlet lineTo1 = \"L \" + fromX + \" \" + fromY;\n"
                                            "\n"
                                            "\t\tlet arc = \"A \" + r + \" \" + r + \" 0 \" + over180 + \" 1 \" + toX + \" \" + toY\n"
                                            "\t\tlet lineTo2 = \"L \" + cx + \" \" + cy;\n"
                                            "\n"
                                            "\t\tstrokeWidth = undefined == strokeWidth ? 1 : strokeWidth;\n"
                                            "\n"
                                            "\t\tlet pie = document.createElementNS(\"http://www.w3.org/2000/svg\", \"path\");\n"
                                            "\n"
                                            "\t\tpie.setAttribute(\"id\", id);\n"
                                            "\t\tpie.setAttribute(\"d\", moveTo + \" \" + lineTo1 + \" \" + arc + \" \" + lineTo2 + \" Z\");\n"
                                            "\t\tpie.setAttribute(\"fill\", fill);\n"
                                            "\t\tpie.setAttribute(\"stroke\", stroke);\n"
                                            "\t\tpie.setAttribute(\"stroke-width\", strokeWidth);\n"
                                            "\n"
                                            "\t\treturn pie;\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Create SVG element: text\n"
                                            "\tlet text = function(id, x, y, fontSize, textAnchor, alignmentBaseline, fill, contents) {\n"
                                            "\n"
                                            "\t\t// Modify y coordinate beacuse IE not supported alignment-baseline attribute\n"
                                            "\t\tlet agent = navigator.userAgent.toLowerCase();\n"
                                            "\t\tlet isIE = false;\n"
                                            "\t\tif ( (navigator.appName == 'Netscape' && navigator.userAgent.search('Trident') != -1) || (agent.indexOf(\"msie\") != -1) ) {\n"
                                            "\t\t\tisIE = true;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tif(isIE) {\n"
                                            "\t\t\tif(\"hanging\" == alignmentBaseline) {\n"
                                            "\t\t\t\ty += fontSize;\n"
                                            "\t\t\t}\n"
                                            "\t\t\telse if(\"middle\" == alignmentBaseline) {\n"
                                            "\t\t\t\ty += fontSize/2;\t\n"
                                            "\t\t\t}\n"
                                            "\t\t\telse if(\"baseline\" == alignmentBaseline) {\n"
                                            "\t\t\t\t// No modify\n"
                                            "\t\t\t}\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlet text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n"
                                            "\n"
                                            "\t\ttext.setAttribute(\"id\", id);\n"
                                            "\t\ttext.setAttribute(\"x\", x);\n"
                                            "\t\ttext.setAttribute(\"y\", y);\n"
                                            "\t\ttext.setAttribute(\"font-size\", fontSize);\n"
                                            "\t\ttext.setAttribute(\"text-anchor\", textAnchor);\n"
                                            "\t\t\n"
                                            "\t\t// IE not supported alignment-baseline attribute\n"
                                            "\t\tif(!isIE) {\n"
                                            "\t\t\ttext.setAttribute(\"alignment-baseline\", alignmentBaseline);\t\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\ttext.setAttribute(\"fill\", fill);\n"
                                            "\n"
                                            "\t\ttext.innerHTML = contents;\n"
                                            "\t\ttext.textContent = contents;\n"
                                            "\n"
                                            "\t\treturn text;\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Create SVG element: aniamte\n"
                                            "\tlet animate = function(attributeName, from, to, dur, fill) {\n"
                                            "\n"
                                            "\t\tlet animate = document.createElementNS(\"http://www.w3.org/2000/svg\", \"animate\");\n"
                                            "\n"
                                            "\t\tanimate.setAttribute(\"attributeName\", attributeName);\n"
                                            "\t\tanimate.setAttribute(\"from\", from);\n"
                                            "\t\tanimate.setAttribute(\"to\", to);\n"
                                            "\t\tanimate.setAttribute(\"dur\", dur);\n"
                                            "\t\tanimate.setAttribute(\"fill\", fill);\n"
                                            "\n"
                                            "\t\treturn animate;\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Common function: add comma\n"
                                            "\tlet addComma = function(num) {\n"
                                            "\t\tvar regexp = /\\B(?=(\\d{3})+(?!\\d))/g;\n"
                                            "\t\treturn num.toString().replace(regexp, ',');\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Calculate label width left of grid y\n"
                                            "\tlet getGridXLabelWidth = function(chart) {\n"
                                            "\n"
                                            "\t\tlet width = 0;\n"
                                            "\n"
                                            "\t\tif(!chart.gridX.label.show) {\n"
                                            "\t\t\treturn;\n"
                                            "\t\t}\n"
                                            "\t\t\t\t\n"
                                            "\t\tlet textMargin = chart.labels.fontSize/3;\n"
                                            "\t\tlet tempText1 = null;\n"
                                            "\t\tlet tempText2 = null;\n"
                                            "\t\tlet maxWidth = 0;\n"
                                            "\t\tlet currentWidth = 0;\n"
                                            "\n"
                                            "\t\tif(\"Column\" == chart.type || \"Line\" == chart.type || \"Stacked-Bar\" == chart.type) {\n"
                                            "\n"
                                            "\t\t\ttempText1 = text(\"tempTextForCalculateWidth\"\n"
                                            "\t\t\t\t, 0, 0\n"
                                            "\t\t\t\t, chart.labels.fontSize\n"
                                            "\t\t\t\t, \"end\", \"middle\"\n"
                                            "\t\t\t\t, chart.labels.fontColor\n"
                                            "\t\t\t\t, addComma(chart.getMaxValue()));\n"
                                            "\n"
                                            "\t\t\tchart.panel.appendChild(tempText1);\n"
                                            "\t\t\tmaxWidth = tempText1.getBoundingClientRect().width;\n"
                                            "\n"
                                            "\t\t\ttempText2 = text(\"tempTextForCalculateWidth\"\n"
                                            "\t\t\t\t, 0, 0\n"
                                            "\t\t\t\t, chart.labels.fontSize\n"
                                            "\t\t\t\t, \"end\", \"middle\"\n"
                                            "\t\t\t\t, chart.labels.fontColor\n"
                                            "\t\t\t\t, addComma(chart.getMinValue()));\n"
                                            "\n"
                                            "\t\t\tchart.panel.appendChild(tempText2);\n"
                                            "\t\t\tcurrentWidth = tempText2.getBoundingClientRect().width;\n"
                                            "\n"
                                            "\t\t\tmaxWidth = maxWidth > currentWidth ? maxWidth : currentWidth;\n"
                                            "\n"
                                            "\t\t\tchart.panel.removeChild(tempText1);\n"
                                            "\t\t\tchart.panel.removeChild(tempText2);\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\telse if(\"Bar\" == chart.type) {\n"
                                            "\n"
                                            "\t\t\tchart.labels.list.forEach(function(label) {\n"
                                            "\n"
                                            "\t\t\t\tlet tempText1 = text(\"tempTextForCalculateWidth\"\n"
                                            "\t\t\t\t\t, 0, 0\n"
                                            "\t\t\t\t\t, chart.labels.fontSize\n"
                                            "\t\t\t\t\t, \"end\", \"middle\"\n"
                                            "\t\t\t\t\t, chart.labels.fontColor\n"
                                            "\t\t\t\t\t, label);\n"
                                            "\n"
                                            "\t\t\t\tchart.panel.appendChild(tempText1);\n"
                                            "\n"
                                            "\t\t\t\tcurrentWidth = tempText1.getBoundingClientRect().width;\n"
                                            "\t\t\t\tmaxWidth = maxWidth > currentWidth ? maxWidth : currentWidth;\n"
                                            "\n"
                                            "\t\t\t\tchart.panel.removeChild(tempText1);\n"
                                            "\t\t\t});\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\twidth = textMargin\n"
                                            "\t\t\t+ maxWidth\n"
                                            "\t\t\t+ 10\n"
                                            "\t\t\t+ textMargin;\n"
                                            "\n"
                                            "\t\treturn width;\n"
                                            "\t}\n"
                                            "\n"
                                            "\t// Calculate label height below axis x\n"
                                            "\tlet getLabelHeight = function(chart) {\n"
                                            "\n"
                                            "\t\tlet height = 0;\n"
                                            "\n"
                                            "\t\tif(chart.labels.show && \"Pie\" != chart.type) {\n"
                                            "\n"
                                            "\t\t\tlet textMargin = chart.labels.fontSize/2;\n"
                                            "\n"
                                            "\t\t\theight = textMargin + chart.labels.fontSize + textMargin;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\treturn height;\n"
                                            "\t}\n"
                                            "\n"
                                            "\t// Calculate axis Y min value\n"
                                            "\tlet getAxisYMinValue = function(chart) {\n"
                                            "\n"
                                            "\t\tlet axisYMinValue = chart.axisY.minValue;\n"
                                            "\t\tif(\"Stacked-Bar\" == chart.type) {\n"
                                            "\t\t\taxisYMinValue = chart.axisY.stackedBarMinValue;\n"
                                            "\t\t}\n"
                                            "\t\tlet minValue = chart.getMinValue();\n"
                                            "\n"
                                            "\t\tif(0 == axisYMinValue && 0 > minValue) {\n"
                                            "\t\t\taxisYMinValue = minValue;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\treturn axisYMinValue;\n"
                                            "\t}\n"
                                            "\n"
                                            "\t// Calculate axis Y max value\n"
                                            "\tlet getAxisYMaxValue = function(chart) {\n"
                                            "\n"
                                            "\t\tlet axisYMaxValue = chart.axisY.maxValue;\n"
                                            "\t\tif(\"Stacked-Bar\" == chart.type) {\n"
                                            "\t\t\taxisYMaxValue = chart.axisY.stackedBarMaxValue;\n"
                                            "\t\t}\n"
                                            "\t\tlet maxValue = chart.getMaxValue();\n"
                                            "\n"
                                            "\t\tif(0 == axisYMaxValue && 0 < maxValue) {\n"
                                            "\t\t\taxisYMaxValue = maxValue;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\treturn axisYMaxValue;\n"
                                            "\t}\n"
                                            "\n"
                                            "\t// Calculate axis X min value\n"
                                            "\tlet getAxisXMinValue = function(chart) {\n"
                                            "\n"
                                            "\t\tlet axisXMinValue = chart.axisX.minValue;\n"
                                            "\t\tlet minValue = chart.getMinValue();\n"
                                            "\n"
                                            "\t\tif(0 == axisXMinValue && 0 > minValue) {\n"
                                            "\t\t\taxisXMinValue = minValue;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\treturn axisXMinValue;\n"
                                            "\t}\n"
                                            "\n"
                                            "\t// Calculate axis X max value\n"
                                            "\tlet getAxisXMaxValue = function(chart) {\n"
                                            "\n"
                                            "\t\tlet axisXMaxValue = chart.axisX.maxValue;\n"
                                            "\t\tlet maxValue = chart.getMaxValue();\n"
                                            "\n"
                                            "\t\tif(0 == axisXMaxValue && 0 < maxValue) {\n"
                                            "\t\t\taxisXMaxValue = maxValue;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\treturn axisXMaxValue;\n"
                                            "\t}\n"
                                            "\n"
                                            "\t// Calculate ratio\n"
                                            "\tlet getRatio = function(chart) {\n"
                                            "\n"
                                            "\t\tlet valueRange = getAxisYMaxValue(chart) - getAxisYMinValue(chart);\n"
                                            "\t\tlet graphHeight = chart.getHeight() - chart.padding.top - chart.padding.bottom - getLabelHeight(chart);\n"
                                            "\n"
                                            "\t\treturn graphHeight / valueRange;\n"
                                            "\t}\n"
                                            "\n"
                                            "\tlet getRatioForX = function(chart) {\n"
                                            "\n"
                                            "\t\tlet valueRange = getAxisXMaxValue(chart) - getAxisXMinValue(chart);\n"
                                            "\t\tlet graphWidth = chart.getWidth() - chart.padding.left - chart.padding.right - getGridXLabelWidth(chart);\n"
                                            "\n"
                                            "\t\treturn graphWidth / valueRange;\n"
                                            "\t}\n"
                                            "\n"
                                            "\t// Calculate axis X position\n"
                                            "\tlet getAxisXPosition = function(chart) {\n"
                                            "\n"
                                            "\t\t// Default value is most below position on graph area\n"
                                            "\t\tlet y = chart.getHeight() - chart.padding.bottom - getLabelHeight(chart);\n"
                                            "\t\tlet maxValue = getAxisYMaxValue(chart);\n"
                                            "\t\tlet minValue = getAxisYMinValue(chart);\n"
                                            "\n"
                                            "\t\t// If chart draws only negative values, axis X located highest position \n"
                                            "\t\tif(maxValue < 0) {\n"
                                            "\t\t\ty = chart.padding.top;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\t// If chart extends plus and minus values, get zero position\n"
                                            "\t\telse if(minValue < 0) {\n"
                                            "\t\t\ty = chart.padding.top + (maxValue * getRatio(chart));\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\treturn y;\n"
                                            "\t}\n"
                                            "\n"
                                            "\t// Calculate axis Y position\n"
                                            "\tlet getAxisYPosition = function(chart) {\n"
                                            "\n"
                                            "\t\t// Default value is most below position on graph area\n"
                                            "\t\tlet x = chart.padding.left + getGridXLabelWidth(chart);\n"
                                            "\t\tlet maxValue = getAxisXMaxValue(chart);\n"
                                            "\t\tlet minValue = getAxisXMinValue(chart);\n"
                                            "\n"
                                            "\t\t// If chart draws only negative values, axis Y located highest position \n"
                                            "\t\tif(maxValue < 0) {\n"
                                            "\t\t\tx = chart.getWidth() - chart.padding.right;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\t// If chart extends plus and minus values, get zero position\n"
                                            "\t\telse if(minValue < 0) {\n"
                                            "\t\t\tx = x - (minValue * getRatioForX(chart));\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\treturn x;\n"
                                            "\t}\n"
                                            "\t\t\n"
                                            "\t// Get panel size\n"
                                            "\tlet width = this.getWidth();\n"
                                            "\tlet height = this.getHeight();\n"
                                            "\n"
                                            "\t// Get graph area size\n"
                                            "\tlet graphMarginTop = this.padding.top;\n"
                                            "\tlet graphMarginBottom = this.padding.bottom + getLabelHeight(this);\n"
                                            "\tlet graphMarginLeft = this.padding.left + getGridXLabelWidth(this);\n"
                                            "\tlet graphMarginRight = this.padding.right;\n"
                                            "\n"
                                            "\tlet graphWidth = width - graphMarginLeft - graphMarginRight;\n"
                                            "\tlet graphHeight = height - graphMarginTop - graphMarginBottom;\n"
                                            "\n"
                                            "\t// Draw chart title\n"
                                            "\tlet drawChartTitle = function(chart) {\n"
                                            "\n"
                                            "\t\tif(!chart.title.show) {\n"
                                            "\t\t\treturn;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\t// Draw title box\n"
                                            "\t\tlet isCenter = false;\n"
                                            "\t\tlet x = chart.title.position.x;\n"
                                            "\n"
                                            "\t\tif(\"center\" == x) {\n"
                                            "\t\t\tisCenter = true;\n"
                                            "\t\t\tx = 0;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlet titleMargin = chart.title.fontSize * 0.5;\n"
                                            "\n"
                                            "\t\tlet titleBox = rect(chart.id + \"-title-box\"\n"
                                            "\t\t\t, x\n"
                                            "\t\t\t, chart.title.position.y\n"
                                            "\t\t\t, 0\n"
                                            "\t\t\t, chart.title.fontSize + (2 * titleMargin)\n"
                                            "\t\t\t, chart.title.backgroundColor\n"
                                            "\t\t\t, chart.title.borderColor);\n"
                                            "\n"
                                            "\t\tchart.panel.appendChild(titleBox);\n"
                                            "\n"
                                            "\t\t// Draw title text\n"
                                            "\t\tlet titleText = text(chart.id + \"-title-text\"\n"
                                            "\t\t\t, x + titleMargin\n"
                                            "\t\t\t, chart.title.position.y + titleMargin\n"
                                            "\t\t\t, chart.title.fontSize\n"
                                            "\t\t\t, \"start\"\n"
                                            "\t\t\t, \"hanging\"\n"
                                            "\t\t\t, chart.title.fontColor\n"
                                            "\t\t\t, chart.title.text);\n"
                                            "\n"
                                            "\t\ttitleText.setAttribute(\"font-family\", chart.title.fontFamily);\n"
                                            "\t\ttitleText.setAttribute(\"font-weight\", chart.title.fontWeight);\n"
                                            "\n"
                                            "\t\tchart.panel.appendChild(titleText);\n"
                                            "\n"
                                            "\t\t// Expand title box by text width\n"
                                            "\t\tlet boxWidth = titleText.getBoundingClientRect().width + (2 * titleMargin);\n"
                                            "\t\ttitleBox.style.width = boxWidth;\n"
                                            "\n"
                                            "\t\t// Reset object position to center\n"
                                            "\t\tif(isCenter) {\n"
                                            "\n"
                                            "\t\t\tlet toCenter = (chart.getWidth() - boxWidth) / 2;\n"
                                            "\n"
                                            "\t\t\ttitleBox.setAttribute(\"x\", toCenter);\n"
                                            "\t\t\ttitleText.setAttribute(\"x\", titleText.getAttribute(\"x\") * 1 + toCenter);\n"
                                            "\t\t}\n"
                                            "\t}\n"
                                            "\n"
                                            "\t// Draw legend table\n"
                                            "\tlet drawLegendTable = function(chart) {\n"
                                            "\n"
                                            "\t\tif(!chart.legends.table.show) {\n"
                                            "\t\t\treturn;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlet id = chart.id + \"-legend-table\";\n"
                                            "\n"
                                            "\t\tlet x = chart.legends.table.position.x;\n"
                                            "\t\tlet isCenter = false;\n"
                                            "\t\tlet isRight = false;\n"
                                            "\n"
                                            "\t\tif(\"center\" == x) {\n"
                                            "\t\t\tisCenter = true;\n"
                                            "\t\t\tx = 0;\n"
                                            "\t\t}\n"
                                            "\t\telse if(\"right\" == x) {\n"
                                            "\t\t\tisRight = true;\n"
                                            "\t\t\tx = 0;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlet y = chart.legends.table.position.y;\n"
                                            "\n"
                                            "\t\tlet legendTable = rect(id, x, y, 0, 0, chart.legends.table.backgroundColor, chart.legends.table.borderColor);\n"
                                            "\t\tchart.panel.appendChild(legendTable);\n"
                                            "\n"
                                            "\t\tlet legendMark = null;\n"
                                            "\t\tlet legendText = null;\n"
                                            "\t\tlet legendIndex = 0;\n"
                                            "\t\tlet linePosition = 0;\n"
                                            "\t\tlet wordWrap = 0;\n"
                                            "\t\tlet margin = chart.labels.fontSize * 0.5;\n"
                                            "\t\tlet totalWidth = 0;\n"
                                            "\t\tlet maxWidth = 0;\n"
                                            "\t\tlet totalHeight = 0;\n"
                                            "\n"
                                            "\t\tlet objectArray = new Array();\n"
                                            "\n"
                                            "\t\tx += margin;\n"
                                            "\n"
                                            "\t\tlet panel = chart.panel;\n"
                                            "\t\tlet labelOptions = chart.labels;\n"
                                            "\t\tlet tableOptions = chart.legends.table;\n"
                                            "\n"
                                            "\t\tchart.legends.list.forEach(function(legend) {\n"
                                            "\n"
                                            "\t\t\tif(\"vertical\" == tableOptions.direction) {\n"
                                            "\n"
                                            "\t\t\t\tlinePosition = y + margin + (3 * margin * legendIndex);\n"
                                            "\n"
                                            "\t\t\t\tlegendMark = rect(id + \"-mark-\" + legendIndex, x, linePosition, labelOptions.fontSize, labelOptions.fontSize, legend.fill, legend.stroke);\n"
                                            "\t\t\t\tpanel.appendChild(legendMark);\n"
                                            "\t\t\t\tobjectArray.push(legendMark);\n"
                                            "\n"
                                            "\t\t\t\tlegendText = text(id + \"-text-\" + legendIndex\n"
                                            "\t\t\t\t\t, x + margin + labelOptions.fontSize\n"
                                            "\t\t\t\t\t, linePosition\n"
                                            "\t\t\t\t\t, labelOptions.fontSize\n"
                                            "\t\t\t\t\t, \"start\"\n"
                                            "\t\t\t\t\t, \"hanging\"\n"
                                            "\t\t\t\t\t, tableOptions.fontColor\n"
                                            "\t\t\t\t\t, legend.name);\n"
                                            "\t\t\t\tpanel.appendChild(legendText);\n"
                                            "\t\t\t\tobjectArray.push(legendText);\n"
                                            "\n"
                                            "\t\t\t\ttotalWidth = margin + labelOptions.fontSize + margin + legendText.getBoundingClientRect().width;\n"
                                            "\t\t\t\tmaxWidth = maxWidth > totalWidth ? maxWidth : totalWidth;\n"
                                            "\n"
                                            "\t\t\t\ttotalHeight += margin + labelOptions.fontSize;\n"
                                            "\t\t\t}\n"
                                            "\t\t\telse if(\"horizontal\" == tableOptions.direction) {\n"
                                            "\n"
                                            "\t\t\t\tlinePosition = y + margin + (3 * margin * wordWrap);\n"
                                            "\n"
                                            "\t\t\t\tlegendMark = rect(id + \"-mark-\" + legendIndex, x, linePosition, labelOptions.fontSize, labelOptions.fontSize, legend.fill, legend.stroke);\n"
                                            "\t\t\t\tpanel.appendChild(legendMark);\n"
                                            "\t\t\t\tobjectArray.push(legendMark);\n"
                                            "\n"
                                            "\t\t\t\tx += labelOptions.fontSize + margin;\n"
                                            "\n"
                                            "\t\t\t\tlegendText = text(id + \"-text-\" + legendIndex\n"
                                            "\t\t\t\t\t, x\n"
                                            "\t\t\t\t\t, linePosition\n"
                                            "\t\t\t\t\t, labelOptions.fontSize\n"
                                            "\t\t\t\t\t, \"start\"\n"
                                            "\t\t\t\t\t, \"hanging\"\n"
                                            "\t\t\t\t\t, tableOptions.fontColor\n"
                                            "\t\t\t\t\t, legend.name);\n"
                                            "\t\t\t\tpanel.appendChild(legendText);\n"
                                            "\t\t\t\tobjectArray.push(legendText);\n"
                                            "\n"
                                            "\t\t\t\tx += legendText.getBoundingClientRect().width + margin;\n"
                                            "\n"
                                            "\t\t\t\ttotalWidth += margin + labelOptions.fontSize + margin + legendText.getBoundingClientRect().width;\n"
                                            "\t\t\t\tmaxWidth = maxWidth > totalWidth ? maxWidth : totalWidth;\n"
                                            "\n"
                                            "\t\t\t\ttotalHeight = (margin + labelOptions.fontSize) * (1 + wordWrap);\n"
                                            "\t\t\t}\n"
                                            "\n"
                                            "\t\t\t++legendIndex;\n"
                                            "\t\t});\n"
                                            "\n"
                                            "\t\tlegendTable.style.height = totalHeight + margin;\n"
                                            "\t\tlegendTable.style.width = maxWidth + margin;\n"
                                            "\n"
                                            "\t\t// Reset object position by align\n"
                                            "\t\tif(isCenter) {\n"
                                            "\n"
                                            "\t\t\tlet toCenter = (chart.getWidth() - maxWidth - margin) / 2;\n"
                                            "\n"
                                            "\t\t\tlegendTable.setAttribute(\"x\", toCenter);\n"
                                            "\n"
                                            "\t\t\tobjectArray.forEach(function(obj){\n"
                                            "\t\t\t\tlet x = obj.getAttribute(\"x\") * 1;\n"
                                            "\t\t\t\tobj.setAttribute(\"x\", x + toCenter);\n"
                                            "\t\t\t});\n"
                                            "\t\t}\n"
                                            "\t\telse if(isRight) {\n"
                                            "\n"
                                            "\t\t\tlet toRight = (chart.getWidth() - maxWidth - margin * 2);\n"
                                            "\n"
                                            "\t\t\tlegendTable.setAttribute(\"x\", toRight);\n"
                                            "\n"
                                            "\t\t\tobjectArray.forEach(function(obj){\n"
                                            "\t\t\t\tlet x = obj.getAttribute(\"x\") * 1;\n"
                                            "\t\t\t\tobj.setAttribute(\"x\", x + toRight);\n"
                                            "\t\t\t});\n"
                                            "\t\t}\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Draw grid X\n"
                                            "\tlet drawGridX = function(chart) {\n"
                                            "\n"
                                            "\t\t// Draw horizontal grid\n"
                                            "\t\tif(!chart.gridX.show) {\n"
                                            "\t\t\treturn;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tif(\"Bar\" == chart.type) {\n"
                                            "\n"
                                            "\t\t\t// Calculate variables\n"
                                            "\t\t\tlet labelCount = chart.labels.list.length;\n"
                                            "\t\t\tlet legendCount = chart.legends.list.length;\n"
                                            "\t\t\tlet groupUnit = 2 * legendCount + 1;\n"
                                            "\t\t\tlet unitCount = groupUnit * labelCount + 1;\n"
                                            "\n"
                                            "\t\t\tlet unitSize = graphHeight / unitCount;\n"
                                            "\n"
                                            "\t\t\tlet id = \"\";\n"
                                            "\n"
                                            "\t\t\tlet y = 0;\n"
                                            "\t\t\tlet from = graphMarginLeft - 5;\n"
                                            "\t\t\tlet to = graphMarginLeft + graphWidth;\n"
                                            "\n"
                                            "\t\t\tlet gridLine = null;\n"
                                            "\n"
                                            "\t\t\tfor(let i = 1; i < chart.labels.list.length; i++) {\n"
                                            "\n"
                                            "\t\t\t\ty = chart.padding.top + (groupUnit * i + 0.5 ) * unitSize;\n"
                                            "\n"
                                            "\t\t\t\tgridLine = line(\n"
                                            "\t\t\t\t\tchart.id + \"-grid-x-\" + i\n"
                                            "\t\t\t\t\t, from\n"
                                            "\t\t\t\t\t, y\n"
                                            "\t\t\t\t\t, to\n"
                                            "\t\t\t\t\t, y\n"
                                            "\t\t\t\t\t, chart.gridX.fill\n"
                                            "\t\t\t\t\t, chart.gridX.fill);\n"
                                            "\n"
                                            "\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\tgridLine.classList.add(chart.id + \"-grid\");\n"
                                            "\t\t\t\t\tgridLine.classList.add(chart.id + \"-grid-x\");\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\tchart.panel.appendChild(gridLine);\n"
                                            "\t\t\t}\n"
                                            "\n"
                                            "\t\t}\n"
                                            "\t\telse {\n"
                                            "\t\t\tlet axisYMinValue = getAxisYMinValue(chart);\n"
                                            "\t\t\tlet axisYMaxValue = getAxisYMaxValue(chart);\n"
                                            "\n"
                                            "\t\t\tlet unit = chart.gridX.interval;\n"
                                            "\n"
                                            "\t\t\t// Calculate interval if not set it\n"
                                            "\t\t\tif(0 == unit) {\n"
                                            "\n"
                                            "\t\t\t\tlet range = (axisYMaxValue - axisYMinValue);\n"
                                            "\t\t\t\tlet tempInterval = Math.round(range / 5);\n"
                                            "\t\t\t\tlet intervalLength = (\"\" + tempInterval).length;\n"
                                            "\t\t\t\tlet digits = Math.pow(10, intervalLength - 1);\n"
                                            "\n"
                                            "\t\t\t\tunit = Math.floor(tempInterval / digits) * digits;\n"
                                            "\t\t\t}\n"
                                            "\n"
                                            "\t\t\tlet baseLineValue = Math.ceil(axisYMinValue / unit) * unit;\n"
                                            "\n"
                                            "\t\t\tlet currentLineValue = baseLineValue;\n"
                                            "\t\t\tlet currentLineHeight = 0;\n"
                                            "\n"
                                            "\t\t\tlet gridIndex = 0;\n"
                                            "\t\t\tlet gridLine = null;\n"
                                            "\t\t\tlet gridLineValueLabel = null;\n"
                                            "\n"
                                            "\t\t\tlet fontSize = chart.labels.fontSize;\n"
                                            "\t\t\tlet fontFamily = chart.labels.fontFamily;\n"
                                            "\t\t\tlet fontWeight = chart.labels.fontWeight;\n"
                                            "\n"
                                            "\t\t\twhile(currentLineValue <= axisYMaxValue) {\n"
                                            "\n"
                                            "\t\t\t\tif(currentLineValue < axisYMinValue) {\n"
                                            "\t\t\t\t\tcurrentLineValue += unit;\n"
                                            "\t\t\t\t\tcontinue;\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t// Draw grid line\n"
                                            "\t\t\t\tcurrentLineHeight = chart.getHeight() - chart.padding.bottom - getLabelHeight(chart) - (currentLineValue - axisYMinValue) * getRatio(chart);\n"
                                            "\n"
                                            "\t\t\t\tgridLine = line(\n"
                                            "\t\t\t\t\tchart.id + \"-grid-x-\" + gridIndex\n"
                                            "\t\t\t\t\t, graphMarginLeft - 5\n"
                                            "\t\t\t\t\t, currentLineHeight\n"
                                            "\t\t\t\t\t, width - graphMarginRight\n"
                                            "\t\t\t\t\t, currentLineHeight\n"
                                            "\t\t\t\t\t, chart.gridX.fill\n"
                                            "\t\t\t\t\t, chart.gridX.fill);\n"
                                            "\n"
                                            "\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\tgridLine.classList.add(chart.id + \"-grid\");\n"
                                            "\t\t\t\t\tgridLine.classList.add(chart.id + \"-grid-x\");\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\tchart.panel.appendChild(gridLine);\n"
                                            "\n"
                                            "\t\t\t\t// Draw grid line value beside axis Y\n"
                                            "\t\t\t\tif(chart.gridX.label.show) {\n"
                                            "\t\t\t\t\tif(currentLineHeight >= fontSize / 2) {\n"
                                            "\t\t\t\t\t\tid = chart.id + \"-grid-x-\" + gridIndex + \"-label\"\n"
                                            "\t\t\t\t\t\tgridLineValueLabel = text(id\n"
                                            "\t\t\t\t\t\t\t, graphMarginLeft - 10\n"
                                            "\t\t\t\t\t\t\t, currentLineHeight\n"
                                            "\t\t\t\t\t\t\t, fontSize\n"
                                            "\t\t\t\t\t\t\t, \"end\"\n"
                                            "\t\t\t\t\t\t\t, \"middle\"\n"
                                            "\t\t\t\t\t\t\t, chart.labels.fontColor\n"
                                            "\t\t\t\t\t\t\t, addComma(currentLineValue));\n"
                                            "\n"
                                            "\t\t\t\t\t\tgridLineValueLabel.setAttribute(\"font-family\", fontFamily);\n"
                                            "\t\t\t\t\t\tgridLineValueLabel.setAttribute(\"font-weight\", fontWeight);\n"
                                            "\t\t\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\t\t\tgridLineValueLabel.classList.add(chart.id + \"-grid-x-label\");\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t\tchart.panel.appendChild(gridLineValueLabel);\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\tcurrentLineValue += unit;\n"
                                            "\t\t\t\t++gridIndex;\n"
                                            "\t\t\t}\n"
                                            "\t\t}\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Draw grid Y\n"
                                            "\tlet drawGridY = function(chart) {\n"
                                            "\n"
                                            "\t\t// Draw vertical grid\n"
                                            "\t\tif(!chart.gridY.show) {\n"
                                            "\t\t\treturn;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tif(\"Bar\" == chart.type) {\n"
                                            "\n"
                                            "\t\t\tlet axisXMinValue = getAxisXMinValue(chart);\n"
                                            "\t\t\tlet axisXMaxValue = getAxisXMaxValue(chart);\n"
                                            "\n"
                                            "\t\t\tlet unit = chart.gridY.interval;\n"
                                            "\n"
                                            "\t\t\t// Calculate interval if not set it\n"
                                            "\t\t\tif(0 == unit) {\n"
                                            "\n"
                                            "\t\t\t\tlet range = (axisXMaxValue - axisXMinValue);\n"
                                            "\t\t\t\tlet tempInterval = Math.round(range / 5);\n"
                                            "\t\t\t\tlet intervalLength = (\"\" + tempInterval).length;\n"
                                            "\t\t\t\tlet digits = Math.pow(10, intervalLength - 1);\n"
                                            "\n"
                                            "\t\t\t\tunit = Math.floor(tempInterval / digits) * digits;\n"
                                            "\t\t\t}\n"
                                            "\n"
                                            "\t\t\tlet baseLineValue = Math.ceil(axisXMinValue / unit) * unit;\n"
                                            "\n"
                                            "\t\t\tlet currentLineValue = baseLineValue;\n"
                                            "\n"
                                            "\t\t\tlet gridIndex = 0;\n"
                                            "\t\t\tlet gridLine = null;\n"
                                            "\t\t\tlet x = 0;\n"
                                            "\t\t\tlet from = chart.padding.top;\n"
                                            "\t\t\tlet to = chart.padding.top + graphHeight + 5;\n"
                                            "\n"
                                            "\t\t\tlet gridLineValueLabel = null;\n"
                                            "\n"
                                            "\t\t\twhile(currentLineValue <= axisXMaxValue) {\n"
                                            "\n"
                                            "\t\t\t\tif(currentLineValue < axisXMinValue) {\n"
                                            "\t\t\t\t\tcurrentLineValue += unit;\n"
                                            "\t\t\t\t\tcontinue;\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t// Draw grid line\n"
                                            "\t\t\t\tx = graphMarginLeft + (currentLineValue - getAxisXMinValue(chart)) * getRatioForX(chart);\n"
                                            "\n"
                                            "\t\t\t\tgridLine = line(\n"
                                            "\t\t\t\t\tchart.id + \"-grid-y-\" + gridIndex\n"
                                            "\t\t\t\t\t, x\n"
                                            "\t\t\t\t\t, from\n"
                                            "\t\t\t\t\t, x\n"
                                            "\t\t\t\t\t, to\n"
                                            "\t\t\t\t\t, chart.gridY.fill\n"
                                            "\t\t\t\t\t, chart.gridY.fill);\n"
                                            "\n"
                                            "\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\tgridLine.classList.add(chart.id + \"-grid\");\n"
                                            "\t\t\t\t\tgridLine.classList.add(chart.id + \"-grid-x\");\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\tchart.panel.appendChild(gridLine);\n"
                                            "\n"
                                            "\t\t\t\t// Draw grid line value below axis X\n"
                                            "\t\t\t\tif(chart.gridY.label.show) {\n"
                                            "\n"
                                            "\t\t\t\t\tgridLineValueLabel = text(\n"
                                            "\t\t\t\t\t\tchart.id + \"-grid-y-\" + gridIndex + \"-label\"\n"
                                            "\t\t\t\t\t\t, x\n"
                                            "\t\t\t\t\t\t, chart.padding.top + graphHeight + chart.labels.fontSize/3\n"
                                            "\t\t\t\t\t\t, chart.labels.fontSize\n"
                                            "\t\t\t\t\t\t, \"middle\"\n"
                                            "\t\t\t\t\t\t, \"hanging\"\n"
                                            "\t\t\t\t\t\t, chart.labels.fontColor\n"
                                            "\t\t\t\t\t\t, addComma(currentLineValue));\n"
                                            "\n"
                                            "\t\t\t\t\tgridLineValueLabel.setAttribute(\"font-family\", chart.labels.fontFamily);\n"
                                            "\t\t\t\t\tgridLineValueLabel.setAttribute(\"font-weight\", chart.labels.fontWeight);\n"
                                            "\n"
                                            "\t\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\t\tgridLineValueLabel.classList.add(chart.id + \"-grid-y-label\");\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\tchart.panel.appendChild(gridLineValueLabel);\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\tcurrentLineValue += unit;\n"
                                            "\t\t\t\t++gridIndex;\n"
                                            "\t\t\t}\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\telse {\n"
                                            "\n"
                                            "\t\t\tlet labelCount = chart.labels.list.length;\n"
                                            "\t\t\tlet legendCount = 1;\n"
                                            "\n"
                                            "\t\t\tif(\"Column\" == chart.type) {\n"
                                            "\t\t\t\tlegendCount = chart.legends.list.length;\n"
                                            "\t\t\t}\n"
                                            "\n"
                                            "\t\t\tlet groupUnit = 2 * legendCount + 1;\n"
                                            "\t\t\tlet unitCount = groupUnit * labelCount + 1;\n"
                                            "\n"
                                            "\t\t\tlet unitWidth = graphWidth / unitCount;\n"
                                            "\n"
                                            "\t\t\tlet gridLine = null;\n"
                                            "\t\t\tlet x = 0;\n"
                                            "\t\t\tlet from = chart.padding.top;\n"
                                            "\t\t\tlet to = chart.padding.top + graphHeight + 5;\n"
                                            "\n"
                                            "\t\t\tfor(let i = 0; i < labelCount; i++) {\n"
                                            "\n"
                                            "\t\t\t\tif(\"Column\" == chart.type || \"Stacked-Bar\" == chart.type) {\n"
                                            "\t\t\t\t\tif(i == labelCount - 1) {\n"
                                            "\t\t\t\t\t\tcontinue;\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t\tx = graphMarginLeft + (groupUnit * (i + 1)) * unitWidth + unitWidth/2;\n"
                                            "\t\t\t\t}\n"
                                            "\t\t\t\telse if(\"Line\" == chart.type) {\n"
                                            "\t\t\t\t\tx = graphMarginLeft + ((groupUnit * unitWidth) / 2) + (groupUnit * unitWidth * i) + unitWidth/2;\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\tgridLine = line(chart.id + \"-grid-y-\" + i\n"
                                            "\t\t\t\t\t, x\n"
                                            "\t\t\t\t\t, from\n"
                                            "\t\t\t\t\t, x\n"
                                            "\t\t\t\t\t, to\n"
                                            "\t\t\t\t\t, chart.gridY.fill\n"
                                            "\t\t\t\t\t, chart.gridY.fill);\n"
                                            "\n"
                                            "\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\tgridLine.classList.add(chart.id + \"-grid\");\n"
                                            "\t\t\t\t\tgridLine.classList.add(chart.id + \"-grid-y\");\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\tchart.panel.appendChild(gridLine);\n"
                                            "\t\t\t}\n"
                                            "\t\t}\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Draw labels\n"
                                            "\tlet drawLabels = function(chart) {\n"
                                            "\n"
                                            "\t\t// Draw labels\n"
                                            "\t\tif(!chart.labels.show) {\n"
                                            "\t\t\treturn;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlet labelCount = chart.labels.list.length;\n"
                                            "\t\tlet legendCount = 1;\n"
                                            "\t\tif(\"Column\" == chart.type || \"Bar\" == chart.type) {\n"
                                            "\t\t\tlegendCount = chart.legends.list.length;\n"
                                            "\t\t}\n"
                                            "\t\tlet groupUnit = 2 * legendCount + 1;\n"
                                            "\t\tlet unitCount = groupUnit * labelCount + 1;\n"
                                            "\n"
                                            "\t\tlet unitSize = 0;\n"
                                            "\n"
                                            "\t\tif(\"Bar\" == chart.type) {\n"
                                            "\t\t\tunitSize = graphHeight / unitCount;\n"
                                            "\t\t}\n"
                                            "\t\telse {\n"
                                            "\t\t\tunitSize = graphWidth / unitCount;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlet index = 0;\n"
                                            "\t\tlet label = null;\n"
                                            "\t\tlet labels = chart.labels.list;\n"
                                            "\t\tlet textAnchor = \"\";\n"
                                            "\t\tlet alignmentBaseline = \"\";\n"
                                            "\n"
                                            "\t\tlet x = 0, y = 0;\n"
                                            "\n"
                                            "\t\tif(\"Bar\" == chart.type) {\n"
                                            "\t\t\tx = chart.padding.left + getGridXLabelWidth(chart) - 10;\n"
                                            "\t\t\ty = 0;\n"
                                            "\t\t\ttextAnchor = \"end\";\n"
                                            "\t\t\talignmentBaseline = \"middle\";\n"
                                            "\t\t}\n"
                                            "\t\telse {\n"
                                            "\t\t\tx = 0;\n"
                                            "\t\t\ty = chart.padding.top + graphHeight + (chart.labels.fontSize/2);\n"
                                            "\t\t\ttextAnchor = \"middle\";\n"
                                            "\t\t\talignmentBaseline = \"hanging\";\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlabels.forEach(function(label) {\n"
                                            "\n"
                                            "\t\t\tif(\"Bar\" == chart.type) {\n"
                                            "\t\t\t\ty = graphMarginTop + (groupUnit * index + legendCount + 1) * unitSize;\n"
                                            "\t\t\t}\n"
                                            "\t\t\telse {\n"
                                            "\t\t\t\tx = graphMarginLeft + (groupUnit * index + legendCount + 1) * unitSize;\n"
                                            "\t\t\t}\n"
                                            "\n"
                                            "\t\t\tlabel = text(chart.id + \"-label-\" + index\n"
                                            "\t\t\t\t, x\n"
                                            "\t\t\t\t, y\n"
                                            "\t\t\t\t, chart.labels.fontSize\n"
                                            "\t\t\t\t, textAnchor\n"
                                            "\t\t\t\t, alignmentBaseline\n"
                                            "\t\t\t\t, chart.labels.fontColor\n"
                                            "\t\t\t\t, label);\n"
                                            "\n"
                                            "\t\t\tlabel.setAttribute(\"font-family\", chart.labels.fontFamily);\n"
                                            "\t\t\tlabel.setAttribute(\"font-weight\", chart.labels.fontWeight);\n"
                                            "\n"
                                            "\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\tlabel.classList.add(chart.id + \"-label\");\n"
                                            "\t\t\t}\n"
                                            "\n"
                                            "\t\t\tchart.panel.appendChild(label);\n"
                                            "\n"
                                            "\t\t\t++index;\n"
                                            "\t\t});\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Draw axis X\n"
                                            "\tlet drawAxisX = function(chart) {\n"
                                            "\n"
                                            "\t\tif(!chart.axisX.show) {\n"
                                            "\t\t\treturn;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlet y = getAxisXPosition(chart);\n"
                                            "\n"
                                            "\t\tif(\"Bar\" == chart.type) {\n"
                                            "\t\t\ty = chart.padding.top + graphHeight;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlet from = chart.padding.left + getGridXLabelWidth(chart) - 5;\n"
                                            "\t\tlet to = chart.getWidth() - chart.padding.right;\n"
                                            "\n"
                                            "\t\tlet axisX = line(\n"
                                            "\t\t\tchart.id + \"-axis-x\"\n"
                                            "\t\t\t, from\n"
                                            "\t\t\t, y\n"
                                            "\t\t\t, to\n"
                                            "\t\t\t, y\n"
                                            "\t\t\t, chart.axisX.color\n"
                                            "\t\t\t, chart.axisX.color\n"
                                            "\t\t\t, chart.axisX.width);\n"
                                            "\n"
                                            "\t\tif(!chart.isIE) {\n"
                                            "\t\t\taxisX.classList.add(chart.id + \"-axis\");\n"
                                            "\t\t\taxisX.classList.add(chart.id + \"-axis-x\");\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tchart.panel.appendChild(axisX);\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Draw axis Y\n"
                                            "\tlet drawAxisY = function(chart) {\n"
                                            "\n"
                                            "\t\tif(!chart.axisY.show) {\n"
                                            "\t\t\treturn;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlet x = graphMarginLeft;\n"
                                            "\n"
                                            "\t\tif(\"Bar\" == chart.type) {\n"
                                            "\t\t\tx = getAxisYPosition(chart);\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlet from = chart.padding.top;\n"
                                            "\t\tlet to = chart.getHeight() - chart.padding.bottom - getLabelHeight(chart) + 5;\n"
                                            "\n"
                                            "\t\tlet axisY = line(\n"
                                            "\t\t\tchart.id + \"-axis-y\"\n"
                                            "\t\t\t, x\n"
                                            "\t\t\t, from\n"
                                            "\t\t\t, x\n"
                                            "\t\t\t, to\n"
                                            "\t\t\t, chart.axisY.color\n"
                                            "\t\t\t, chart.axisY.color\n"
                                            "\t\t\t, chart.axisY.width);\n"
                                            "\n"
                                            "\t\tif(!chart.isIE) {\n"
                                            "\t\t\taxisY.classList.add(chart.id + \"-axis\");\n"
                                            "\t\t\taxisY.classList.add(chart.id + \"-axis-y\");\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tchart.panel.appendChild(axisY);\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Draw columns\n"
                                            "\tlet drawColumns = function(chart) {\n"
                                            "\n"
                                            "\t\tif(undefined == chart.labels.list) {\n"
                                            "\t\t\treturn;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\t// Calculate variables\n"
                                            "\t\tlet labelCount = chart.labels.list.length;\n"
                                            "\t\tlet legendCount = chart.legends.list.length;\n"
                                            "\t\tlet groupUnit = 2 * legendCount + 1;\n"
                                            "\t\tlet unitCount = groupUnit * labelCount + 1;\n"
                                            "\n"
                                            "\t\tlet unitWidth = graphWidth / unitCount;\n"
                                            "\n"
                                            "\t\tlet id = \"\";\n"
                                            "\n"
                                            "\t\t// Draw bars\n"
                                            "\t\tlet legendsIndex = 0;\n"
                                            "\n"
                                            "\t\tlet bar = null;\n"
                                            "\t\tlet barWidth = unitWidth * 2;\n"
                                            "\t\tlet valueHeight = 0;\n"
                                            "\t\tlet x = 0;\n"
                                            "\t\tlet y = 0;\n"
                                            "\n"
                                            "\t\tlet animation = null;\n"
                                            "\n"
                                            "\t\tlet barValue = null;\n"
                                            "\n"
                                            "\t\tchart.legends.list.forEach(function(legend) {\n"
                                            "\n"
                                            "\t\t\tlet valuesIndex = 0;\n"
                                            "\n"
                                            "\t\t\tlegend.values.forEach(function(value) {\n"
                                            "\n"
                                            "\t\t\t\tif(labelCount > valuesIndex) {\n"
                                            "\n"
                                            "\t\t\t\t\tif((value > 0 && value <= getAxisYMinValue(chart))\n"
                                            "\t\t\t\t\t\t|| (value < 0 && getAxisYMinValue(chart) >= 0)) {\n"
                                            "\n"
                                            "\t\t\t\t\t\tvalueHeight = 0;\n"
                                            "\t\t\t\t\t\ty = getAxisXPosition(chart);\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t\telse {\n"
                                            "\n"
                                            "\t\t\t\t\t\tvalueHeight = Math.abs(value) * getRatio(chart);\n"
                                            "\n"
                                            "\t\t\t\t\t\tif(value > 0) {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\ty = chart.padding.top + graphHeight - ((value - getAxisYMinValue(chart)) * getRatio(chart));\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tif(getAxisYMinValue(chart) > 0) {\n"
                                            "\t\t\t\t\t\t\t\tvalueHeight -= getAxisYMinValue(chart) * getRatio(chart);\n"
                                            "\t\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t\telse {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\ty = getAxisXPosition(chart);\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tif(y + valueHeight > chart.padding.top + graphHeight) {\n"
                                            "\t\t\t\t\t\t\t\tvalueHeight = Math.abs(getAxisYMinValue(chart)) * getRatio(chart);\n"
                                            "\t\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t// Draw bars\n"
                                            "\t\t\t\t\tx = graphMarginLeft + (groupUnit * valuesIndex + 1 + 2 * legendsIndex) * unitWidth;\n"
                                            "\n"
                                            "\t\t\t\t\tid = chart.id + \"-bar-\" + legendsIndex + \"-\" + valuesIndex;\n"
                                            "\n"
                                            "\t\t\t\t\tbar = rect(id, x + 1, y, barWidth - 2, valueHeight, legend.fill, legend.stroke);\n"
                                            "\t\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\t\tbar.classList.add(chart.id + \"-bar\"); // Add class Bar\n"
                                            "\t\t\t\t\t\tbar.classList.add(chart.id + \"-bar-\" + legendsIndex); // Add class Bar-Legend\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t\tbar.style.cursor = \"pointer\";\n"
                                            "\n"
                                            "\t\t\t\t\tif(chart.animate.show) {\n"
                                            "\n"
                                            "\t\t\t\t\t\tbar.setAttribute(\"height\", 0);\n"
                                            "\t\t\t\t\t\tanimation = animate(\"height\", 0, valueHeight, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\tbar.appendChild(animation);\n"
                                            "\n"
                                            "\t\t\t\t\t\tif(value > 0) {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tbar.setAttribute(\"y\", getAxisXPosition(chart));\n"
                                            "\t\t\t\t\t\t\tanimation = animate(\"y\", getAxisXPosition(chart), y, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\t\tbar.appendChild(animation);\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t\t\n"
                                            "\t\t\t\t\tchart.panel.appendChild(bar);\n"
                                            "\n"
                                            "\t\t\t\t\t// Draw tooltip\n"
                                            "\t\t\t\t\tif(chart.tooltip.show) {\n"
                                            "\n"
                                            "\t\t\t\t\t\tbar.setAttribute(\"legend\", legend.name);\n"
                                            "\t\t\t\t\t\tbar.setAttribute(\"value\", addComma(value));\n"
                                            "\t\t\t\t\t\tbar.setAttribute(\"label\", chart.labels.list[valuesIndex]);\n"
                                            "\n"
                                            "\t\t\t\t\t\tbar.addEventListener(\"mouseover\", function(event) {\n"
                                            "\t\t\t\t\t\t\tchart.showTooltip(event, this, chart);\n"
                                            "\t\t\t\t\t\t});\n"
                                            "\t\t\t\t\t\tbar.addEventListener(\"mousemove\", function(event) {\n"
                                            "\t\t\t\t\t\t\tchart.showTooltip(event, this, chart);\n"
                                            "\t\t\t\t\t\t});\n"
                                            "\t\t\t\t\t\tbar.addEventListener(\"mouseout\", function(event) {\n"
                                            "\t\t\t\t\t\t\tchart.hideTooltip(event, chart);\n"
                                            "\t\t\t\t\t\t});\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t// Draw value on bar\n"
                                            "\t\t\t\t\tif(value > 0) {\n"
                                            "\t\t\t\t\t\ty = getAxisXPosition(chart) - valueHeight - (chart.labels.fontSize/3) - chart.labels.fontSize;\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t\telse {\n"
                                            "\t\t\t\t\t\ty = getAxisXPosition(chart) + valueHeight + (chart.labels.fontSize/3);\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\tif(chart.valueOnChart.show && (value > 0 && y > 0 || value < 0 && (y + chart.labels.fontSize) < (graphHeight + chart.padding.top))) {\n"
                                            "\n"
                                            "\t\t\t\t\t\tid = chart.id + \"-bar-\" + legendsIndex + \"-\" + valuesIndex + \"-value\";\n"
                                            "\n"
                                            "\t\t\t\t\t\tbarValue = text(id, x + barWidth/2, y, chart.labels.fontSize, \"middle\", \"hanging\", chart.labels.fontColor, addComma(value));\n"
                                            "\t\t\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\t\t\tbarValue.classList.add(chart.id + \"-bar-value\");\n"
                                            "\t\t\t\t\t\t\tbarValue.classList.add(chart.id + \"-bar-value-\" + legendsIndex);\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t\tif(chart.animate.show) {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tbarValue.setAttribute(\"font-size\", 0);\n"
                                            "\t\t\t\t\t\t\tanimation = animate(\"font-size\", 0, chart.labels.fontSize, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\t\tbarValue.appendChild(animation);\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tbarValue.setAttribute(\"y\", getAxisXPosition(chart));\n"
                                            "\t\t\t\t\t\t\tanimation = animate(\"y\", getAxisXPosition(chart), y, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\t\tbarValue.appendChild(animation);\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t\tchart.panel.appendChild(barValue);\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t++valuesIndex;\n"
                                            "\t\t\t\t}\n"
                                            "\t\t\t});\n"
                                            "\n"
                                            "\t\t\t++legendsIndex;\n"
                                            "\t\t});\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Draw bars\n"
                                            "\tlet drawBars = function(chart) {\n"
                                            "\n"
                                            "\t\tif(undefined == chart.labels.list) {\n"
                                            "\t\t\treturn;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\t// Calculate variables\n"
                                            "\t\tlet labelCount = chart.labels.list.length;\n"
                                            "\t\tlet legendCount = chart.legends.list.length;\n"
                                            "\t\tlet groupUnit = 2 * legendCount + 1;\n"
                                            "\t\tlet unitCount = groupUnit * labelCount + 1;\n"
                                            "\n"
                                            "\t\tlet unitSize = graphHeight / unitCount;\n"
                                            "\n"
                                            "\t\tlet id = \"\";\n"
                                            "\n"
                                            "\t\t// Draw bars\n"
                                            "\t\tlet legendsIndex = 0;\n"
                                            "\n"
                                            "\t\tlet bar = null;\n"
                                            "\t\tlet barHeight = unitSize * 2;\n"
                                            "\t\tlet valueWidth = 0;\n"
                                            "\t\tlet x = 0;\n"
                                            "\t\tlet y = 0;\n"
                                            "\n"
                                            "\t\tlet animation = null;\n"
                                            "\n"
                                            "\t\tlet barValue = null;\n"
                                            "\t\tlet textAnchor = \"\"\n"
                                            "\t\tlet alignmentBaseline = \"\";\n"
                                            "\t\tlet textWidth = 0;\n"
                                            "\n"
                                            "\t\tchart.legends.list.forEach(function(legend) {\n"
                                            "\n"
                                            "\t\t\tlet valuesIndex = 0;\n"
                                            "\n"
                                            "\t\t\tlegend.values.forEach(function(value) {\n"
                                            "\n"
                                            "\t\t\t\tx = getAxisYPosition(chart);\n"
                                            "\n"
                                            "\t\t\t\tif(labelCount > valuesIndex) {\n"
                                            "\n"
                                            "\t\t\t\t\tif(value > 0 && value <= getAxisXMinValue(chart)\n"
                                            "\t\t\t\t\t\t|| value < 0 && getAxisXMinValue(chart) > 0) {\n"
                                            "\n"
                                            "\t\t\t\t\t\tvalueWidth = 0;\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t\telse {\n"
                                            "\n"
                                            "\t\t\t\t\t\tvalueWidth = Math.abs(value) * getRatioForX(chart);\n"
                                            "\n"
                                            "\t\t\t\t\t\tif(value < 0) {\n"
                                            "\t\t\t\t\t\t\tx -= valueWidth;\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t\tif(value > 0 && getAxisXMinValue(chart) > 0) {\n"
                                            "\t\t\t\t\t\t\tvalueWidth -= getAxisXMinValue(chart) * getRatioForX(chart);\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t// Draw bars\n"
                                            "\t\t\t\t\ty = chart.padding.top + (groupUnit * valuesIndex + 1 + 2 * legendsIndex) * unitSize;\n"
                                            "\n"
                                            "\t\t\t\t\tid = chart.id + \"-bar-\" + legendsIndex + \"-\" + valuesIndex;\n"
                                            "\n"
                                            "\t\t\t\t\tbar = rect(id, x, y + 1, valueWidth, barHeight - 2, legend.fill, legend.stroke);\n"
                                            "\t\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\t\tbar.classList.add(chart.id + \"-bar\"); // Add class Bar\n"
                                            "\t\t\t\t\t\tbar.classList.add(chart.id + \"-bar-\" + legendsIndex); // Add class Bar-Legend\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t\tbar.style.cursor = \"pointer\";\n"
                                            "\n"
                                            "\t\t\t\t\tif(chart.animate.show) {\n"
                                            "\n"
                                            "\t\t\t\t\t\tbar.setAttribute(\"width\", 0);\n"
                                            "\t\t\t\t\t\tanimation = animate(\"width\", 0, valueWidth, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\tbar.appendChild(animation);\n"
                                            "\n"
                                            "\t\t\t\t\t\tif(value < 0) {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tbar.setAttribute(\"x\", getAxisYPosition(chart));\n"
                                            "\t\t\t\t\t\t\tanimation = animate(\"x\", getAxisYPosition(chart), x, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\t\tbar.appendChild(animation);\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t\t\n"
                                            "\t\t\t\t\tchart.panel.appendChild(bar);\n"
                                            "\n"
                                            "\t\t\t\t\t// Draw tooltip\n"
                                            "\t\t\t\t\tif(chart.tooltip.show) {\n"
                                            "\n"
                                            "\t\t\t\t\t\tbar.setAttribute(\"legend\", legend.name);\n"
                                            "\t\t\t\t\t\tbar.setAttribute(\"value\", addComma(value));\n"
                                            "\t\t\t\t\t\tbar.setAttribute(\"label\", chart.labels.list[valuesIndex]);\n"
                                            "\n"
                                            "\t\t\t\t\t\tbar.addEventListener(\"mouseover\", function(event) {\n"
                                            "\t\t\t\t\t\t\tchart.showTooltip(event, this, chart);\n"
                                            "\t\t\t\t\t\t});\n"
                                            "\t\t\t\t\t\tbar.addEventListener(\"mousemove\", function(event) {\n"
                                            "\t\t\t\t\t\t\tchart.showTooltip(event, this, chart);\n"
                                            "\t\t\t\t\t\t});\n"
                                            "\t\t\t\t\t\tbar.addEventListener(\"mouseout\", function(event) {\n"
                                            "\t\t\t\t\t\t\tchart.hideTooltip(event, chart);\n"
                                            "\t\t\t\t\t\t});\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t// Draw value on bar\n"
                                            "\t\t\t\t\tif(chart.valueOnChart.show) {\n"
                                            "\n"
                                            "\t\t\t\t\t\tif(value > 0) {\n"
                                            "\t\t\t\t\t\t\tx = getAxisYPosition(chart) + valueWidth + chart.labels.fontSize/3;\n"
                                            "\t\t\t\t\t\t\ttextAnchor = \"start\"\n"
                                            "\t\t\t\t\t\t\talignmentBaseline = \"central\";\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t\telse {\n"
                                            "\t\t\t\t\t\t\tx = getAxisYPosition(chart) - valueWidth - chart.labels.fontSize/3;\n"
                                            "\t\t\t\t\t\t\ttextAnchor = \"end\"\n"
                                            "\t\t\t\t\t\t\talignmentBaseline = \"middle\";\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t\tid = chart.id + \"-bar-\" + legendsIndex + \"-\" + valuesIndex + \"-value\";\n"
                                            "\n"
                                            "\t\t\t\t\t\tbarValue = text(id\n"
                                            "\t\t\t\t\t\t\t, x, y + unitSize + 1\n"
                                            "\t\t\t\t\t\t\t, chart.labels.fontSize\n"
                                            "\t\t\t\t\t\t\t, textAnchor\n"
                                            "\t\t\t\t\t\t\t, alignmentBaseline\n"
                                            "\t\t\t\t\t\t\t, chart.labels.fontColor\n"
                                            "\t\t\t\t\t\t\t, addComma(value));\n"
                                            "\n"
                                            "\t\t\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\t\t\tbarValue.classList.add(chart.id + \"-bar-value\");\n"
                                            "\t\t\t\t\t\t\tbarValue.classList.add(chart.id + \"-bar-value-\" + legendsIndex);\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t\tchart.panel.appendChild(barValue);\n"
                                            "\n"
                                            "\t\t\t\t\t\ttextWidth = barValue.getBoundingClientRect().width;\n"
                                            "\n"
                                            "\t\t\t\t\t\tif(value > 0 && x + textWidth > graphMarginLeft + graphWidth) {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tx = getAxisYPosition(chart) + valueWidth - chart.labels.fontSize/3;\n"
                                            "\t\t\t\t\t\t\tbarValue.setAttribute(\"text-anchor\", \"end\");\n"
                                            "\t\t\t\t\t\t\tbarValue.setAttribute(\"x\", x);\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t\telse if(value < 0 && x - textWidth < graphMarginLeft) {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tx = getAxisYPosition(chart) - valueWidth + chart.labels.fontSize/3;\n"
                                            "\t\t\t\t\t\t\tbarValue.setAttribute(\"text-anchor\", \"start\");\n"
                                            "\t\t\t\t\t\t\tbarValue.setAttribute(\"x\", x);\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t\tif(chart.animate.show) {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tbarValue.setAttribute(\"font-size\", 0);\n"
                                            "\t\t\t\t\t\t\tanimation = animate(\"font-size\", 0, chart.labels.fontSize, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\t\tbarValue.appendChild(animation);\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tbarValue.setAttribute(\"x\", getAxisYPosition(chart));\n"
                                            "\t\t\t\t\t\t\tanimation = animate(\"x\", getAxisYPosition(chart), x, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\t\tbarValue.appendChild(animation);\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t++valuesIndex;\n"
                                            "\t\t\t\t}\n"
                                            "\t\t\t});\n"
                                            "\n"
                                            "\t\t\t++legendsIndex;\n"
                                            "\t\t});\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Draw lines\n"
                                            "\tlet drawLines = function(chart) {\n"
                                            "\n"
                                            "\t\tif(undefined == chart.labels.list) {\n"
                                            "\t\t\treturn;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\t// Calculate variables\n"
                                            "\t\tlet labelCount = chart.labels.list.length;\n"
                                            "\t\tlet groupUnit = 3;\n"
                                            "\t\tlet unitCount = groupUnit * labelCount + 1;\n"
                                            "\n"
                                            "\t\tlet unitWidth = graphWidth / unitCount;\n"
                                            "\n"
                                            "\t\tlet id = \"\";\n"
                                            "\n"
                                            "\t\tlet legendsIndex = 0;\n"
                                            "\n"
                                            "\t\t// Draw lines\n"
                                            "\t\tchart.legends.list.forEach(function(legend) {\n"
                                            "\n"
                                            "\t\t\tlet valuesIndex = 0;\n"
                                            "\n"
                                            "\t\t\tlet x1 = 0;\n"
                                            "\t\t\tlet x2 = 0;\n"
                                            "\t\t\tlet y0 = 0;\n"
                                            "\t\t\tlet y1 = null;\n"
                                            "\t\t\tlet y2 = 0;\n"
                                            "\n"
                                            "\t\t\tlet line1 = null;\n"
                                            "\t\t\tlet lineD0 = \"\";\n"
                                            "\t\t\tlet lineD1 = \"\";\n"
                                            "\n"
                                            "\t\t\tlet animation = null;\n"
                                            "\n"
                                            "\t\t\tlegend.values.forEach(function(value) {\n"
                                            "\n"
                                            "\t\t\t\tif(labelCount > valuesIndex) {\n"
                                            "\t\t\t\t\t\n"
                                            "\t\t\t\t\t// Calculate current coordinates\n"
                                            "\t\t\t\t\tx2 = graphMarginLeft + unitWidth/2 + ((groupUnit * unitWidth) / 2) + (groupUnit * unitWidth * valuesIndex);\n"
                                            "\t\t\t\t\ty2 = chart.padding.top + graphHeight - ((value - getAxisYMinValue(chart)) * getRatio(chart));\n"
                                            "\n"
                                            "\t\t\t\t\tif(null != y1\n"
                                            "\t\t\t\t\t\t&& y2 >= chart.padding.top - 0.1\n"
                                            "\t\t\t\t\t\t&& y2 <= chart.padding.top + graphHeight + 0.1) {\n"
                                            "\n"
                                            "\t\t\t\t\t\tid = chart.id + \"-line-\" + legendsIndex + \"-\" + valuesIndex;\n"
                                            "\n"
                                            "\t\t\t\t\t\tif(\"straight\" == chart.line.style) {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tline1 = line(id\n"
                                            "\t\t\t\t\t\t\t\t, x1, y1\n"
                                            "\t\t\t\t\t\t\t\t, x2, y2\n"
                                            "\t\t\t\t\t\t\t\t, legend.stroke\n"
                                            "\t\t\t\t\t\t\t\t, legend.stroke\n"
                                            "\t\t\t\t\t\t\t\t, chart.line.width);\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\t\t\t\tline1.classList.add(chart.id + \"-line\");\n"
                                            "\t\t\t\t\t\t\t\tline1.classList.add(chart.id + \"-line-\" + legendsIndex);\n"
                                            "\t\t\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tif(chart.animate.show) {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\t\t// Flat line on axis X\n"
                                            "\t\t\t\t\t\t\t\tlineD0 = \"M\" + x1 + \" \" + getAxisXPosition(chart) + \" L\" + x2 + \" \" + getAxisXPosition(chart) + \" Z\";\n"
                                            "\n"
                                            "\t\t\t\t\t\t\t\t// Current line\n"
                                            "\t\t\t\t\t\t\t\tlineD1 = line1.getAttribute(\"d\");\n"
                                            "\n"
                                            "\t\t\t\t\t\t\t\tline1.setAttribute(\"d\", lineD0);\n"
                                            "\t\t\t\t\t\t\t\tanimation = animate(\"d\", lineD0, lineD1, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\t\t\tline1.appendChild(animation);\n"
                                            "\t\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t\telse if(\"curve\" == chart.line.style) {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tline1 = curve(id\n"
                                            "\t\t\t\t\t\t\t\t, x1, y1\n"
                                            "\t\t\t\t\t\t\t\t, (x1 + x2) / 2, y1\n"
                                            "\t\t\t\t\t\t\t\t, x2, y2\n"
                                            "\t\t\t\t\t\t\t\t, (x1 + x2) / 2, y2\n"
                                            "\t\t\t\t\t\t\t\t, legend.stroke\n"
                                            "\t\t\t\t\t\t\t\t, chart.line.width);\n"
                                            "\t\t\t\t\t\t\t\n"
                                            "\t\t\t\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\t\t\t\tline1.classList.add(chart.id + \"-line\");\n"
                                            "\t\t\t\t\t\t\t\tline1.classList.add(chart.id + \"-line-\" + legendsIndex);\n"
                                            "\t\t\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tif(chart.animate.show) {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\t\t// Flat line on axis X\n"
                                            "\t\t\t\t\t\t\t\tlineD0 = \"M\" + x1 + \" \" + getAxisXPosition(chart)\n"
                                            "\t\t\t\t\t\t\t\t\t+ \" C\" + ((x1 + x2)/2) + \" \" + getAxisXPosition(chart)\n"
                                            "\t\t\t\t\t\t\t\t\t+ \" \" + ((x1 + x2)/2) + \" \" + getAxisXPosition(chart)\n"
                                            "\t\t\t\t\t\t\t\t\t+ \" \" + x2 + \" \" + getAxisXPosition(chart);\n"
                                            "\n"
                                            "\t\t\t\t\t\t\t\t// Current line\n"
                                            "\t\t\t\t\t\t\t\tlineD1 = line1.getAttribute(\"d\");\n"
                                            "\n"
                                            "\t\t\t\t\t\t\t\tline1.setAttribute(\"d\", lineD0);\n"
                                            "\t\t\t\t\t\t\t\tanimation = animate(\"d\", lineD0, lineD1, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\t\t\tline1.appendChild(animation);\n"
                                            "\t\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t\tchart.panel.appendChild(line1);\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\tx1 = x2;\n"
                                            "\n"
                                            "\t\t\t\t\ty0 = y1;\n"
                                            "\t\t\t\t\ty1 = y2;\n"
                                            "\n"
                                            "\t\t\t\t\t++valuesIndex;\n"
                                            "\t\t\t\t}\n"
                                            "\t\t\t});\n"
                                            "\n"
                                            "\t\t\t++legendsIndex;\n"
                                            "\t\t});\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Draw points\n"
                                            "\tlet drawPoints = function(chart) {\n"
                                            "\n"
                                            "\t\tif(undefined == chart.labels.list) {\n"
                                            "\t\t\treturn;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\t// Calculate variables\n"
                                            "\t\tlet labelCount = chart.labels.list.length;\n"
                                            "\t\tlet groupUnit = 3;\n"
                                            "\t\tlet unitCount = groupUnit * labelCount + 1;\n"
                                            "\n"
                                            "\t\tlet unitWidth = graphWidth / unitCount;\n"
                                            "\n"
                                            "\t\tlet id = \"\";\n"
                                            "\n"
                                            "\t\tlet legendsIndex = 0;\n"
                                            "\n"
                                            "\t\t// Draw points\n"
                                            "\t\tchart.legends.list.forEach(function(legend) {\n"
                                            "\n"
                                            "\t\t\tlet valuesIndex = 0;\n"
                                            "\n"
                                            "\t\t\tlet x = 0;\n"
                                            "\t\t\tlet y = 0;\n"
                                            "\n"
                                            "\t\t\tlet point = null;\n"
                                            "\t\t\tlet pointValue = null;\n"
                                            "\t\t\tlet pointValueY = 0;\n"
                                            "\t\t\tlet minY = chart.padding.top + graphHeight - (chart.labels.fontSize/3);\n"
                                            "\n"
                                            "\t\t\tlegend.values.forEach(function(value) {\n"
                                            "\n"
                                            "\t\t\t\tif(labelCount > valuesIndex) {\n"
                                            "\t\t\t\t\t\n"
                                            "\t\t\t\t\t// Calculate current coordinates\n"
                                            "\t\t\t\t\tx = graphMarginLeft + unitWidth/2 + ((groupUnit * unitWidth) / 2) + (groupUnit * unitWidth * valuesIndex);\n"
                                            "\t\t\t\t\ty = chart.padding.top + graphHeight - ((value - getAxisYMinValue(chart)) * getRatio(chart));\n"
                                            "\n"
                                            "\t\t\t\t\t// Draw point\n"
                                            "\t\t\t\t\tif(chart.point.show\n"
                                            "\t\t\t\t\t\t&& y >= chart.padding.top - 0.1\n"
                                            "\t\t\t\t\t\t&& y <= chart.padding.top + graphHeight + 0.1) {\n"
                                            "\n"
                                            "\t\t\t\t\t\tid = chart.id + \"-line-point-\" + legendsIndex + \"-\" + valuesIndex;\n"
                                            "\t\t\t\t\t\tpoint = circle(id, x, y, chart.point.radius, legend.fill, legend.stroke, chart.point.strokeWidth);\n"
                                            "\t\t\t\t\t\tpoint.style.cursor = \"pointer\";\n"
                                            "\n"
                                            "\t\t\t\t\t\tif(chart.animate.show) {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tpoint.setAttribute(\"cy\", getAxisXPosition(chart));\n"
                                            "\t\t\t\t\t\t\tpointMove = animate(\"cy\", getAxisXPosition(chart), y, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\t\tpoint.appendChild(pointMove);\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tpoint.setAttribute(\"r\", 0);\n"
                                            "\t\t\t\t\t\t\tpointMove = animate(\"r\", 0, chart.point.radius, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\t\tpoint.appendChild(pointMove);\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t\tchart.panel.appendChild(point);\n"
                                            "\n"
                                            "\t\t\t\t\t\t// Draw tooltip\n"
                                            "\t\t\t\t\t\tif(chart.tooltip.show) {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tpoint.setAttribute(\"legend\", legend.name);\n"
                                            "\t\t\t\t\t\t\tpoint.setAttribute(\"value\", addComma(value));\n"
                                            "\t\t\t\t\t\t\tpoint.setAttribute(\"label\", chart.labels.list[valuesIndex]);\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tpoint.addEventListener(\"mouseover\", function(event) {\n"
                                            "\t\t\t\t\t\t\t\tchart.showTooltip(event, this, chart);\n"
                                            "\t\t\t\t\t\t\t});\n"
                                            "\t\t\t\t\t\t\tpoint.addEventListener(\"mousemove\", function(event) {\n"
                                            "\t\t\t\t\t\t\t\tchart.showTooltip(event, this, chart);\n"
                                            "\t\t\t\t\t\t\t});\n"
                                            "\t\t\t\t\t\t\tpoint.addEventListener(\"mouseout\", function(event) {\n"
                                            "\t\t\t\t\t\t\t\tchart.hideTooltip(event, chart);\n"
                                            "\t\t\t\t\t\t\t});\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t// Draw value on point\n"
                                            "\t\t\t\t\tif(chart.valueOnChart.show) {\n"
                                            "\n"
                                            "\t\t\t\t\t\tid = chart.id + \"-line-\" + legendsIndex + \"-\" + valuesIndex + \"-value\";\n"
                                            "\t\t\t\t\t\tpointValueY = y - chart.point.radius - (chart.labels.fontSize/3);\n"
                                            "\n"
                                            "\t\t\t\t\t\tpointValueY = minY < pointValueY ? minY : pointValueY;\n"
                                            "\n"
                                            "\t\t\t\t\t\tif(pointValueY > chart.labels.fontSize) {\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tpointValue = text(id\n"
                                            "\t\t\t\t\t\t\t\t, x, pointValueY\n"
                                            "\t\t\t\t\t\t\t\t, chart.labels.fontSize\n"
                                            "\t\t\t\t\t\t\t\t, \"middle\", \"baseline\"\n"
                                            "\t\t\t\t\t\t\t\t, chart.labels.fontColor\n"
                                            "\t\t\t\t\t\t\t\t, addComma(value));\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\t\t\t\tpointValue.classList.add(chart.id + \"-line-value\");\n"
                                            "\t\t\t\t\t\t\t\tpointValue.classList.add(chart.id + \"-line-value-\" + legendsIndex);\n"
                                            "\t\t\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tif(chart.animate.show) {\n"
                                            "\t\t\t\t\t\t\t\t\n"
                                            "\t\t\t\t\t\t\t\tpointValue.setAttribute(\"y\", getAxisXPosition(chart));\n"
                                            "\t\t\t\t\t\t\t\tpointMove = animate(\"y\", getAxisXPosition(chart), pointValueY, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\t\t\tpointValue.appendChild(pointMove);\n"
                                            "\n"
                                            "\t\t\t\t\t\t\t\tpointValue.setAttribute(\"font-size\", 0);\n"
                                            "\t\t\t\t\t\t\t\tpointMove = animate(\"font-size\", 0, chart.labels.fontSize, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\t\t\tpointValue.appendChild(pointMove);\n"
                                            "\t\t\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t\t\tchart.panel.appendChild(pointValue);\n"
                                            "\t\t\t\t\t\t}\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\t++valuesIndex;\n"
                                            "\t\t\t\t}\n"
                                            "\t\t\t});\n"
                                            "\n"
                                            "\t\t\t++legendsIndex;\n"
                                            "\t\t});\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Draw stacked bars\n"
                                            "\tlet drawStackedBars = function(chart) {\n"
                                            "\n"
                                            "\t\tif(undefined == chart.labels.list) {\n"
                                            "\t\t\treturn;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\t// Calculate variables\n"
                                            "\t\tlet labelCount = chart.labels.list.length;\n"
                                            "\t\tlet groupUnit = 3;\n"
                                            "\t\tlet unitCount = groupUnit * labelCount + 1;\n"
                                            "\n"
                                            "\t\tlet unitWidth = graphWidth / unitCount;\n"
                                            "\n"
                                            "\t\tlet id = \"\";\n"
                                            "\n"
                                            "\t\tlet bar = null;\n"
                                            "\t\tlet barWidth = unitWidth * 2;\n"
                                            "\t\tlet valueHeight = 0;\n"
                                            "\t\tlet x = 0;\n"
                                            "\t\tlet y = 0;\n"
                                            "\t\tlet valueY = 0;\n"
                                            "\n"
                                            "\t\tlet animation = null;\n"
                                            "\n"
                                            "\t\tlet barValue = null;\n"
                                            "\n"
                                            "\t\tlet labelIndex = 0;\n"
                                            "\n"
                                            "\t\tlet legendsList = chart.legends.list;\n"
                                            "\t\tlet labelObject = null;\n"
                                            "\n"
                                            "\t\t// Create value array by label\n"
                                            "\t\tlet value = 0;\n"
                                            "\t\tlet stackedBarArray = new Array();\n"
                                            "\n"
                                            "\t\tchart.labels.list.forEach(function(label) {\n"
                                            "\n"
                                            "\t\t\tlabelObject = new Object();\n"
                                            "\t\t\tlabelObject[label] = new Array();\n"
                                            "\n"
                                            "\t\t\tchart.legends.list.forEach(function(legend) {\n"
                                            "\n"
                                            "\t\t\t\tvalue = legend.values[labelIndex];\n"
                                            "\t\t\t\tvalue = undefined === value ? 0 : value; // Undefined value to Zero\n"
                                            "\n"
                                            "\t\t\t\t// Negative value not allowed at Stacked-Bar chart\n"
                                            "\t\t\t\tif(value < 0) {\n"
                                            "\t\t\t\t\ttry {\n"
                                            "\t\t\t\t\t\tthrow new Error(\"Negative value not allowed at [\" \n"
                                            "\t\t\t\t\t\t\t+ legend.name + \"][\" + labelIndex + \"] = \" + value);\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t\tcatch(e) {\n"
                                            "\t\t\t\t\t\tconsole.log(e);\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t\tvalue = 0;\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\tlabelObject[label].push(value);\n"
                                            "\n"
                                            "\t\t\t});\n"
                                            "\n"
                                            "\t\t\tstackedBarArray.push(labelObject);\n"
                                            "\n"
                                            "\t\t\t++labelIndex;\n"
                                            "\t\t});\n"
                                            "\n"
                                            "\t\t// Draw bar\n"
                                            "\t\tlet valuesIndex = 0;\n"
                                            "\t\tlet legendsIndex = 0;\n"
                                            "\t\tlet totalValue = 0;\n"
                                            "\t\tlet cummulatedValue = 0;\n"
                                            "\n"
                                            "\t\tstackedBarArray.forEach(function(values) {\n"
                                            "\n"
                                            "\t\t\tlegendsIndex = 0;\n"
                                            "\t\t\tx = graphMarginLeft + (groupUnit * valuesIndex + 1) * unitWidth;\n"
                                            "\t\t\ty = getAxisXPosition(chart);\n"
                                            "\n"
                                            "\t\t\t// Sum total value by label\n"
                                            "\t\t\ttotalValue = 0;\n"
                                            "\t\t\tcummulatedValue = 0;\n"
                                            "\n"
                                            "\t\t\tvalues[chart.labels.list[valuesIndex]].forEach(function(value) {\n"
                                            "\t\t\t\ttotalValue += value;\n"
                                            "\t\t\t});\n"
                                            "\n"
                                            "\t\t\tvalues[chart.labels.list[valuesIndex]].forEach(function(value) {\n"
                                            "\n"
                                            "\t\t\t\t// Draw bars\n"
                                            "\t\t\t\tid = chart.id + \"-bar-\" + legendsIndex + \"-\" + valuesIndex;\n"
                                            "\t\t\t\tvalueHeight = value * getRatio(chart);\n"
                                            "\n"
                                            "\t\t\t\tif(getAxisYMinValue(chart) > 0) {\n"
                                            "\n"
                                            "\t\t\t\t\tif(cummulatedValue + value <= getAxisYMinValue(chart)) {\n"
                                            "\t\t\t\t\t\tvalueHeight = 0;\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t\telse if(cummulatedValue <= getAxisYMinValue(chart) && cummulatedValue + value > getAxisYMinValue(chart)) {\n"
                                            "\t\t\t\t\t\tvalueHeight = ((cummulatedValue + value) - getAxisYMinValue(chart)) * getRatio(chart);\n"
                                            "\t\t\t\t\t}\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\ty -= valueHeight;\n"
                                            "\n"
                                            "\t\t\t\tbar = rect(id, x + 1, y, barWidth - 2, valueHeight, legendsList[legendsIndex].fill, legendsList[legendsIndex].stroke);\n"
                                            "\n"
                                            "\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\tbar.classList.add(chart.id + \"-bar\"); // Add class Bar\n"
                                            "\t\t\t\t\tbar.classList.add(chart.id + \"-bar-\" + legendsIndex); // Add class Bar-Legend\n"
                                            "\t\t\t\t}\n"
                                            "\t\t\t\tbar.style.cursor = \"pointer\";\n"
                                            "\n"
                                            "\t\t\t\tif(chart.animate.show) {\n"
                                            "\n"
                                            "\t\t\t\t\tbar.setAttribute(\"height\", 0);\n"
                                            "\t\t\t\t\tanimation = animate(\"height\", 0, valueHeight, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\tbar.appendChild(animation);\n"
                                            "\n"
                                            "\t\t\t\t\tbar.setAttribute(\"y\", getAxisXPosition(chart));\n"
                                            "\t\t\t\t\tanimation = animate(\"y\", getAxisXPosition(chart), y, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\tbar.appendChild(animation);\n"
                                            "\t\t\t\t}\n"
                                            "\t\t\t\t\n"
                                            "\t\t\t\tchart.panel.appendChild(bar);\n"
                                            "\n"
                                            "\t\t\t\t// Draw tooltip\n"
                                            "\t\t\t\tif(chart.tooltip.show) {\n"
                                            "\n"
                                            "\t\t\t\t\tbar.setAttribute(\"legend\", chart.legends.list[legendsIndex].name);\n"
                                            "\t\t\t\t\tbar.setAttribute(\"value\", addComma(value) + \" / \" + addComma(totalValue));\n"
                                            "\t\t\t\t\tbar.setAttribute(\"label\", chart.labels.list[valuesIndex]);\n"
                                            "\n"
                                            "\t\t\t\t\tbar.addEventListener(\"mouseover\", function(event) {\n"
                                            "\t\t\t\t\t\tchart.showTooltip(event, this, chart);\n"
                                            "\t\t\t\t\t});\n"
                                            "\t\t\t\t\tbar.addEventListener(\"mousemove\", function(event) {\n"
                                            "\t\t\t\t\t\tchart.showTooltip(event, this, chart);\n"
                                            "\t\t\t\t\t});\n"
                                            "\t\t\t\t\tbar.addEventListener(\"mouseout\", function(event) {\n"
                                            "\t\t\t\t\t\tchart.hideTooltip(event, chart);\n"
                                            "\t\t\t\t\t});\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t// Draw value on bar\n"
                                            "\t\t\t\tvalueY = y + valueHeight / 2;\n"
                                            "\n"
                                            "\t\t\t\tif(chart.valueOnChart.show && valueHeight > 0 && value > 0 && valueY > 0) {\n"
                                            "\n"
                                            "\t\t\t\t\tid = chart.id + \"-bar-\" + legendsIndex + \"-\" + valuesIndex + \"-value\";\n"
                                            "\n"
                                            "\t\t\t\t\tbarValue = text(id, x + barWidth/2, valueY, chart.labels.fontSize, \"middle\", \"middle\", chart.labels.fontColor, addComma(value));\n"
                                            "\t\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\t\tbarValue.classList.add(chart.id + \"-bar-value\");\n"
                                            "\t\t\t\t\t\tbarValue.classList.add(chart.id + \"-bar-value-\" + legendsIndex);\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\tif(chart.animate.show) {\n"
                                            "\n"
                                            "\t\t\t\t\t\tbarValue.setAttribute(\"font-size\", 0);\n"
                                            "\t\t\t\t\t\tanimation = animate(\"font-size\", 0, chart.labels.fontSize, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\tbarValue.appendChild(animation);\n"
                                            "\n"
                                            "\t\t\t\t\t\tbarValue.setAttribute(\"y\", getAxisXPosition(chart));\n"
                                            "\t\t\t\t\t\tanimation = animate(\"y\", getAxisXPosition(chart), valueY, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\tbarValue.appendChild(animation);\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\tchart.panel.appendChild(barValue);\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\tcummulatedValue += value;\n"
                                            "\t\t\t\t++legendsIndex;\n"
                                            "\t\t\t});\n"
                                            "\n"
                                            "\t\t\t++valuesIndex;\n"
                                            "\t\t});\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Draw pie\n"
                                            "\tlet drawPie = function(chart) {\n"
                                            "\n"
                                            "\t\tif(undefined == chart.labels.list) {\n"
                                            "\t\t\treturn;\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlet legendName = \"\";\n"
                                            "\t\tlet totalValue = 0;\n"
                                            "\n"
                                            "\t\t// Pie chart draws by first value\n"
                                            "\t\tfor(let i = 0; i < chart.legends.list.length; i++) {\n"
                                            "\n"
                                            "\t\t\tlegendName = chart.legends.list[i].name;\n"
                                            "\n"
                                            "\t\t\t// Negative value not allowed at Pie chart\n"
                                            "\t\t\tif(chart.legends.list[i].values[0] > 0) {\n"
                                            "\t\t\t\ttotalValue += chart.legends.list[i].values[0];\n"
                                            "\t\t\t}\n"
                                            "\t\t}\n"
                                            "\n"
                                            "\t\tlet cx = chart.getWidth() / 2;\n"
                                            "\t\tlet cy = chart.padding.top + (chart.getHeight() - chart.padding.top) / 2;\n"
                                            "\n"
                                            "\t\tlet radius = graphWidth / 2 > graphHeight / 2 ? graphHeight / 2 : graphWidth / 2;\n"
                                            "\n"
                                            "\t\tlet id = \"\";\n"
                                            "\t\tlet piece = null;\n"
                                            "\t\tlet cummulatedValue = 0;\n"
                                            "\t\tlet cummulatedRate = 0;\n"
                                            "\t\tlet currentValue = 0;\n"
                                            "\t\tlet currentRate = 0;\n"
                                            "\t\tlet legendsIndex = 0;\n"
                                            "\t\tlet transparent = \"rgba(255, 255, 255, 0)\"\n"
                                            "\t\tlet gray = \"rgba(200, 200, 200, 1)\"\n"
                                            "\t\tlet valueX = 0;\n"
                                            "\t\tlet valueY = 0;\n"
                                            "\n"
                                            "\t\tchart.legends.list.forEach(function(legend) {\n"
                                            "\n"
                                            "\t\t\tcurrentValue = legend.values[0];\n"
                                            "\n"
                                            "\t\t\t// Negative value not allowed at Pie chart\n"
                                            "\t\t\tif(currentValue < 0) {\n"
                                            "\t\t\t\ttry {\n"
                                            "\t\t\t\t\tthrow new Error(\"Negative value not allowed at [\" \n"
                                            "\t\t\t\t\t\t+ legend.name + \"][0] = \" + currentValue);\n"
                                            "\t\t\t\t}\n"
                                            "\t\t\t\tcatch(e) {\n"
                                            "\t\t\t\t\tconsole.log(e);\n"
                                            "\t\t\t\t}\n"
                                            "\t\t\t}\n"
                                            "\n"
                                            "\t\t\telse {\n"
                                            "\n"
                                            "\t\t\t\tcurrentRate = currentValue / totalValue;\n"
                                            "\n"
                                            "\t\t\t\tid = chart.id + \"-pie-\" + legendsIndex\n"
                                            "\n"
                                            "\t\t\t\tif(currentRate == 1.0) {\n"
                                            "\t\t\t\t\tpiece = circle(id, cx, cy, radius, legend.fill, legend.stroke, 1);\n"
                                            "\t\t\t\t}\n"
                                            "\t\t\t\telse {\n"
                                            "\t\t\t\t\tpiece = pie(id, cx, cy, radius, cummulatedRate, cummulatedRate + currentRate, legend.fill, legend.stroke, 1);\n"
                                            "\t\t\t\t}\n"
                                            "\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\tpiece.classList.add(chart.id + \"-pie\"); // Add class Bar\n"
                                            "\t\t\t\t}\n"
                                            "\t\t\t\tpiece.style.cursor = \"pointer\";\n"
                                            "\n"
                                            "\t\t\t\tif(chart.animate.show) {\n"
                                            "\n"
                                            "\t\t\t\t\tpiece.setAttribute(\"fill\", transparent);\n"
                                            "\t\t\t\t\tanimation = animate(\"fill\", transparent, legend.fill, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\tpiece.appendChild(animation);\n"
                                            "\n"
                                            "\t\t\t\t\tpiece.setAttribute(\"stroke\", gray);\n"
                                            "\t\t\t\t\tanimation = animate(\"stroke\", gray, legend.stroke, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\tpiece.appendChild(animation);\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\tchart.panel.appendChild(piece);\n"
                                            "\n"
                                            "\t\t\t\t// Draw tooltip\n"
                                            "\t\t\t\tif(chart.tooltip.show) {\n"
                                            "\n"
                                            "\t\t\t\t\tpiece.setAttribute(\"legend\", legend.name);\n"
                                            "\t\t\t\t\tpiece.setAttribute(\"value\", addComma(currentValue));\n"
                                            "\t\t\t\t\tpiece.setAttribute(\"label\", Math.round(10000 * (currentRate)) / 100 + \"%\");\n"
                                            "\n"
                                            "\t\t\t\t\tpiece.addEventListener(\"mouseover\", function(event) {\n"
                                            "\t\t\t\t\t\tchart.showTooltip(event, this, chart);\n"
                                            "\t\t\t\t\t});\n"
                                            "\t\t\t\t\tpiece.addEventListener(\"mousemove\", function(event) {\n"
                                            "\t\t\t\t\t\tchart.showTooltip(event, this, chart);\n"
                                            "\t\t\t\t\t});\n"
                                            "\t\t\t\t\tpiece.addEventListener(\"mouseout\", function(event) {\n"
                                            "\t\t\t\t\t\tchart.hideTooltip(event, chart);\n"
                                            "\t\t\t\t\t});\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t// Draw value on Pie\n"
                                            "\t\t\t\tif(chart.valueOnChart.show) {\n"
                                            "\n"
                                            "\t\t\t\t\tvalueX = cx + (radius / 1.5) * Math.cos(((cummulatedRate + currentRate/2) * 360 - 90) * Math.PI / 180.0);\n"
                                            "\t\t\t\t\tvalueY = cy + (radius / 1.5) * Math.sin(((cummulatedRate + currentRate/2) * 360 - 90) * Math.PI / 180.0);\n"
                                            "\n"
                                            "\t\t\t\t\tid = chart.id + \"-pie-\" + legendsIndex + \"-name\";\n"
                                            "\n"
                                            "\t\t\t\t\tlegendText = text(id, valueX, valueY, chart.labels.fontSize, \"middle\", \"middle\", chart.labels.fontColor, Math.round(10000 * (currentRate)) / 100 + \"%\");\n"
                                            "\t\t\t\t\tif(!chart.isIE) {\n"
                                            "\t\t\t\t\t\tlegendText.classList.add(chart.id + \"-pie-name\");\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\tif(chart.animate.show) {\n"
                                            "\n"
                                            "\t\t\t\t\t\tlegendText.setAttribute(\"font-size\", 0);\n"
                                            "\t\t\t\t\t\tanimation = animate(\"font-size\", 0, chart.labels.fontSize, chart.animate.duration, \"freeze\");\n"
                                            "\t\t\t\t\t\tlegendText.appendChild(animation);\n"
                                            "\t\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\t\tchart.panel.appendChild(legendText);\n"
                                            "\t\t\t\t}\n"
                                            "\n"
                                            "\t\t\t\tcummulatedValue += currentValue;\n"
                                            "\t\t\t\tcummulatedRate = cummulatedValue / totalValue;\n"
                                            "\t\t\t}\n"
                                            "\n"
                                            "\t\t\t++legendsIndex;\n"
                                            "\t\t});\n"
                                            "\t};\n"
                                            "\n"
                                            "\t// Draw chart by type\n"
                                            "\tif(\"Column\" == this.type) {\n"
                                            "\n"
                                            "\t\tdrawGridX(this);\n"
                                            "\t\tdrawGridY(this);\n"
                                            "\n"
                                            "\t\tdrawColumns(this);\n"
                                            "\n"
                                            "\t\tdrawAxisY(this);\n"
                                            "\t\tdrawAxisX(this);\n"
                                            "\n"
                                            "\t\tdrawLabels(this);\n"
                                            "\t\tdrawChartTitle(this);\n"
                                            "\t\tdrawLegendTable(this);\n"
                                            "\n"
                                            "\t\tif(restartAnimation) {\n"
                                            "\t\t\tthis.restartAnimation(this);\n"
                                            "\t\t}\n"
                                            "\t}\n"
                                            "\tif(\"Bar\" == this.type) {\n"
                                            "\n"
                                            "\t\tdrawGridX(this);\n"
                                            "\t\tdrawGridY(this);\n"
                                            "\n"
                                            "\t\tdrawAxisX(this);\n"
                                            "\t\tdrawAxisY(this);\n"
                                            "\n"
                                            "\t\tdrawBars(this);\n"
                                            "\n"
                                            "\t\tdrawLabels(this);\n"
                                            "\t\tdrawChartTitle(this);\n"
                                            "\t\tdrawLegendTable(this);\n"
                                            "\n"
                                            "\t\tif(restartAnimation) {\n"
                                            "\t\t\tthis.restartAnimation(this);\n"
                                            "\t\t}\n"
                                            "\t}\n"
                                            "\telse if(\"Line\" == this.type) {\n"
                                            "\n"
                                            "\t\tdrawGridX(this);\n"
                                            "\t\tdrawGridY(this);\n"
                                            "\n"
                                            "\t\tdrawAxisX(this);\n"
                                            "\t\tdrawAxisY(this);\n"
                                            "\n"
                                            "\t\tdrawLines(this);\n"
                                            "\t\tdrawPoints(this);\n"
                                            "\n"
                                            "\t\tdrawLabels(this);\n"
                                            "\t\tdrawChartTitle(this);\n"
                                            "\t\tdrawLegendTable(this);\n"
                                            "\n"
                                            "\t\tif(restartAnimation) {\n"
                                            "\t\t\tthis.restartAnimation(this);\n"
                                            "\t\t}\n"
                                            "\t}\n"
                                            "\telse if(\"Stacked-Bar\" == this.type) {\n"
                                            "\n"
                                            "\t\tdrawGridX(this);\n"
                                            "\t\tdrawGridY(this);\n"
                                            "\n"
                                            "\t\tdrawAxisX(this);\n"
                                            "\t\tdrawAxisY(this);\n"
                                            "\n"
                                            "\t\tdrawStackedBars(this);\n"
                                            "\n"
                                            "\t\tdrawLabels(this);\n"
                                            "\t\tdrawChartTitle(this);\n"
                                            "\t\tdrawLegendTable(this);\n"
                                            "\n"
                                            "\t\tif(restartAnimation) {\n"
                                            "\t\t\tthis.restartAnimation(this);\n"
                                            "\t\t}\n"
                                            "\t}\n"
                                            "\telse if(\"Pie\" == this.type) {\n"
                                            "\n"
                                            "\t\tdrawPie(this);\n"
                                            "\n"
                                            "\t\tdrawChartTitle(this);\n"
                                            "\t\tdrawLegendTable(this);\n"
                                            "\n"
                                            "\t\tif(restartAnimation) {\n"
                                            "\t\t\tthis.restartAnimation(this);\n"
                                            "\t\t}\n"
                                            "\t}\n"
                                            "}"
                                            "</script>"
                                            "<head>"
                                            "</head>"
                                            "<body>"
                                            "<h1>NodeMCU Temperature Server</h1>"
                                            "<table>"
                                            "   <tr>"
                                            "      <th>Temperature</th>"
                                            "      <th>Time</th>"
                                            "   </tr>"
                                            "   <tr>"
                                            "       <td id=\"temp_c\"></td>"
                                            "       <td id=\"time\"></td>"
                                            "   </tr>"
                                            "</table>"
                                            "<div id=\"all_data\" style=\"height: 400px;\"></div>\r\n"
                                            "<script>\r\n"
                                            "   var d = new Dopyo(\"all-data\", \"Line\");\r\n"
                                            "   d.setLabels([]);\r\n"
                                            "   d.addLegend({\"name\": \"Celsius\", \"values\": []});\r\n"
                                            "   d.addLegend({\"name\": \"Fahrenheit\", \"values\": []});\r\n"
                                            "   d.setPadding(75, 30, 10, 0);\r\n"
                                            "   d.setTitleText(\"Temperature\");\r\n"
                                            "   d.setGridYShow(true);\r\n"
                                            "   let div = document.getElementById(\"all_data\");\r\n"
                                            "   d.inject(div);\r\n"
                                            "   d.draw();\r\n"
                                            "   var update_current = setInterval(function() {loadData(\"current_data\", updateCurrentData)}, 1000);\r\n"
                                            "   var update_all = setInterval(function() {loadData(\"all_data\", updateAllData)}, 1000);\r\n"
                                            "   function loadData(url, callback) {\r\n"
                                            "      var xhttp = new XMLHttpRequest();\r\n"
                                            "      xhttp.onreadystatechange = function() {\r\n"
                                            "         if (this.readyState == 4 && this.status == 200) {\r\n"
                                            "            callback.apply(xhttp);\r\n"
                                            "         }\r\n"
                                            "      };\r\n"
                                            "      xhttp.open(\"GET\", url, true);\r\n"
                                            "      xhttp.send();\r\n"
                                            "   }\r\n"
                                            "   function updateCurrentData() {\r\n"
                                            "      data = this.responseText.split(' ');\r\n"
                                            "      document.getElementById(\"temp_c\").innerHTML = data[0];\r\n"
                                            "      document.getElementById(\"time\").innerHTML = data[1];\r\n"
                                            "   }\r\n"
                                            "   function updateAllData() {\r\n"
                                            "      var data = JSON.parse(this.responseText);\r\n"
                                            "      d.setLabels(data[\"time\"]);\r\n"
                                            "      d.getLegend(\"Celsius\")[\"values\"] = data[\"temp\"];\r\n"
                                            "      d.getLegend(\"Fahrenheit\")[\"values\"] = data[\"temp\"].map(function(v) {return v * 9 / 5 + 32;});\r\n"
                                            "      d.draw();\r\n"
                                            "   }\r\n"
                                            "</script>\r\n"
                                            "</body>";
        }
    }
}

#endif // PAGES_HPP
